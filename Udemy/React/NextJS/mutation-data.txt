Multiple Data Mutation Strategies

	- In Next.js, "mutate" refers to modifying data, typically on the server, and then updating the client-side cache to reflect those changes. 

	- It's a concept often used with data fetching and state management libraries like SWR or TanStack Query. 

	- Mutations are used for operations that aren't simple data retrieval (GET requests), such as creating, updating, or deleting data (POST, PUT, DELETE requests).

	- When a mutation is performed, the client-side data becomes stale. 
	
	- To ensure the UI displays the most recent data, it's crucial to update the cache. 
	
	- Libraries like SWR and TanStack Query provide mechanisms to automatically revalidate or update the cache after a mutation. 
	
	- This revalidation process fetches fresh data from the server, ensuring consistency between the client and server states.




Option 1
	
	Standalone Backend
		
		A separate backend receives requests from the NextJS app and stores / mutates all data.
		
	Separate Server	 ---------> NextJS App
		
	  POST, PATCH
	  
	Problem: Unnecessary complexity, unnecessary extra server.
	
Option 2

	Integrated NextJS App
		
		The NextJS app itself contains the data mutation code and reaches out directly to the data stores.
		
	NextJS App	
		
		Renders pages and handles for submissions / data mutation
		
	Advantage:
		
		Reduced complexity, single codebase and server.
		
Setting up a form action
	
	export default function NewPostPage() {
	
		/*
			1. React will prevent the browser's default behavior of sending a request to an url.
			2. It will then give a formData object to extract the data of the form.
			3. We get hold of the input values because of the name attribute.
		*/

		function createPost(formData) {
			const title = formData.get('title');
			const image = formData.get('image');
			const content = formData.get('content');

			console.log(title, image, content);
		}	


		return (
			<>
				<h1>Create a new post</h1>
				<form action={createPost}>
					<p className="form-control">
						<label htmlFor="title">Title</label>
						<input type="text" id="title" name="title" />
					</p>
					<p className="form-control">
						<label htmlFor="image">Image URL</label>
						<input
							type="file"
							accept="image/png, image/jpeg"
							id="image"
							name="image"
						/>
					</p>
					<p className="form-control">
						<label htmlFor="content">Content</label>
						<textarea id="content" name="content" rows="5" />
					</p>
					<p className="form-actions">
						<button type="reset">Reset</button>
						<button>Create Post</button>
					</p>
				</form>
			</>
		);
	}

Creating a server action
	
	import { storePost } from "@/lib/posts";

	export default function NewPostPage() {

		async function createPost(formData) {
			"use server";
			const title = formData.get('title');
			const image = formData.get('image');
			const content = formData.get('content');

			storePost({
				imageUrl: '',
				title: title,
				content: content,
				userId: 1
			});
		}	

		return (
			<>
				<h1>Create a new post</h1>
				<form action={createPost}>
					<p className="form-control">
						<label htmlFor="title">Title</label>
						<input type="text" id="title" name="title" />
					</p>
					<p className="form-control">
						<label htmlFor="image">Image URL</label>
						<input
							type="file"
							accept="image/png, image/jpeg"
							id="image"
							name="image"
						/>
					</p>
					<p className="form-control">
						<label htmlFor="content">Content</label>
						<textarea id="content" name="content" rows="5" />
					</p>
					<p className="form-actions">
						<button type="reset">Reset</button>
						<button>Create Post</button>
					</p>
				</form>
			</>
		);
	}

Updated and correct server action:

	"use server";

	import { storePost } from "@/lib/posts";
	import { redirect } from 'next/navigation';

	/* prevState is the {} initial state object from the useActionState(action, {}) in post-form component */
	export async function createPost(prevState, formData) {
		
		const title = formData.get('title');
		const image = formData.get('image');
		const content = formData.get('content');

		let errors = [];

		if (!title || title.trim().length === 0) {
			errors.push("Title is required");
		}

		if (!content || content.trim().length === 0) {
			errors.push("Content is required");
		}

		if (!image || image.size === 0) {
			errors.push("Image is required.");
		}

		if (errors.length > 0) {
			return { errors };
		}

		await storePost({
			imageUrl: '',
			title: title,
			content: content,
			userId: 1
		});

		redirect('/feed');
	}
	
Usage
	
	import { createPost } from "@/actions/posts";
	import PostForm from "@/components/post-form";


	export default function NewPostPage() {
		return <PostForm action={createPost} />
	}
	
	
What's very important to understand about this directive is the following: 
It's just "telling" NextJS that something should become a server action. I.e., that NextJS should send requests to that function behind the scenes (kind of).

"use server" does not mean or guarantee that the code will only execute on the server! 
Whilst that will be the case for server actions, you can't rely on the usage of "use server" to "hide code" from the client!

If you have code that must never end up on the client-side (no matter if it's a server action or not), 
you should instead use the server-only package as described here:
	
	https://nextjs.org/docs/app/getting-started/server-and-client-components#keeping-server-only-code-out-of-the-client-environment