NextJS

Resources
	
	https://github.com/mschwarzmueller/nextjs-complete-guide-course-resources
	
	https://academind.com/community/
	
	https://github.com/mschwarzmueller/nextjs-course-code
	
	https://github.com/academind/react-complete-guide-course-resources/tree/main/code/30%20React%20Summary
	

Create a NextJS project
	
	npx create-next-app@latest
	
Two approaches for building NextJS Apps

	Pages Router.
		
		- Has been around for many years.
		
		- Very stable.
		
		- Used in many existing NextJS projects.
		
		- Allows you to build feature-rich fullstack apps with React.
	
	App Router
		
		- Introduced with NextJS 13
		
		- Marked as stable but still relatively new and partially buggy.
		
		- Supports modern Next and React features (fullstack React apps)
		
		- The future on NextJS.
		
Install SQLite
	
	npm install better-sqlite3
	
	create an initdb.js file and store it in the root folder.
	
	execute the command -> node initdb.js
		
	A new db file must be there (meals.db)
	
	From powershell
		
		sqlite3.exe meals.db
		
		select * from meals;
	
Install slugify
	
	npm install slugify --save
	
Install xss
	
	Helps protecting against cross site scripting attacks.
	
	npm install xss --save
	
Install Cloudinary
	
	npm i next-cloudinary
	
	CLOUDINARY_URL=cloudinary://<your_api_key>:<your_api_secret>@dpaz7htfd
	
Run the app

	npm run dev
	
icon.jpg 
	
	Favicon that will be automatically recognized by NextJS.
	
Vanilla React Apps Render on the Client
	
	Server side only returns one single html file which contains the client side JS code.
	
	Client side: The visible content is generated and rendered on the client side by the client side React code.
	
	React is a client side Javascript library. It runs in the browser. It edits and manipulates the page in the browser.
	
	In React, a page update is performed via client side. The page is not reloaded or re rendered on the server.
	
NextJS renders pages on the server

	Page HTML content is rendered on the server and sent to the client.
	
	With NextJS you no longer have a client side application, you have a full stack application.
	
	
Reserved File Names

	As you already learned, there are some reserved filenames when working with NextJS.

	Important: 
		
		These filenames are only reserved when creating them inside of the app/ folder (or any subfolder). 
		
		Outside of the app/ folder, these filenames are not treated in any special way.

	Here's a list of reserved filenames in NextJS - you'll, of course, learn about the important ones throughout this section:

		page.js => Create a new page (e.g., app/about/page.js creates a <your-domain>/about page)

		layout.js => Create a new layout that wraps sibling and nested pages

		not-found.js => Fallback page for "Not Found" errors (thrown by sibling or nested pages or layouts)

		error.js => Fallback page for other errors (thrown by sibling pages or nested pages or layouts)

		loading.js => Fallback page which is shown whilst sibling or nested pages (or layouts) are fetching data

		route.js => Allows you to create an API route (i.e., a page which does NOT return JSX code but instead data, e.g., in the JSON format)

	https://nextjs.org/docs/app/api-reference/file-conventions
	
	
	
Nested Pages
	
	app
		
		community				---> /community
			
			page.js
			
		meals					---> /meals
			
			shared				---> /meals/share
				
				page.js
				
		page.js
		
			import Link from "next/link";

			export default function Home() {
				return (
					<main>
						<h1 style={{ color: 'white', textAlign: 'center' }}>
							Time to get started!
						</h1>
						<p><Link href="/meals">Meals</Link></p>
						<p><Link href="/meals/share">Share Meal</Link></p>
						<p><Link href="/community">Community</Link></p>
					</main>
				);
			}
	

Dynamic Routes

	Slug is a reserved file name. It's the part that is encoded in the url. How do we access that value?
	
	NextJS pass a special props to those special kind of components.
	
	We can use params for that. Params has a special object where any dynamic path segment that is configured for the route
	will be store as a key value pair
	
	app	
	
		community
		meals
			[mealSlug] ---> key  actual value enconded in the url is the value

	blog
		
		[slug]	--> my-page.com/blog/post-1
					my-page.com/blog/post-2
					my-page.com/blog/something-else
					
					
	
	blog
		
		[slug]
			
			page.js
				
				/* 
					NextJS pass props to the components. With destructuring you can get the params prop.
					Params is set by NextJS.
				*/
				
				export default function BlogPostPage({ params }) {
					return (
						<main>
							<h1>Blog Post</h1>
							<p>{params.slug}</p> // --> This will print post-1 or post-2
						</main>
					);
				}
		
		page.js
		
			import Link from "next/link";

			export default function BlogPage() {
				return (
					<main>
						<h1>The Blog</h1>
						<p><Link href="/blog/post-1">Post 1</Link></p>
						<p><Link href="/blog/post-2">Post 2</Link></p>
					</main>
				)
			}
		
React Server Component vs Client Component

	Vanilla React Apps Render on the client
	
		- Server Side (Backend)
	
			Only returns one single HTML file which contains the client side js code
		
		- Client Side (Frontend)
		
			The visible content is generated and rendered on the client side (by the client side react code)
	
	With NextJS, you build fullstack applications
		
		- Server side + Client side
		
	Server and client side working together
		
		- Server side (backend)
			
			The backend executes the server component functions and hence derives the to be rendered HTML code.
			
		- Client side (frontend)
			
			The client side receives and renders the to be rendered HTML code.
		
	**** Remember React components that you create with NextJS are executed in the server not in the browser.
	**** Hooks and Event Handlers are not available on the server side.
	
	React Server Components:
	
		Components that are only rendered on the server.
		
		By default, all React components in NextJS are RSCs.
		
		Advantage: Less client side js great for SEO (Search Engine Optimization).
		
	Client Components:
	
		Components that are pre rendered on the server but then also potentially on the client.
		
		Opt in via "use client" directive.
		
		Advantage: Client-side interactivity.
		
Aggresive Caching
	
	It caches any page you visited including the data of that page.
	
loading.js

	Reserved file name. The file is actived if the page next to it or any nested page is loading data.
	
Suspense
	
	This is an alternative to loading.js
	
	Example
		
		import { Fragment, Suspense } from "react";
		import classes from './page.module.css';
		import Link from "next/link";
		import MealsGrid from "@/components/meals/meals-grid";
		import { getMeals } from "@/lib/meal";

		/* Separate server component to render the data */
		async function Meals() {
			const meals = await getMeals();
			return <MealsGrid meals={meals} />
		}

		export default function MealsPage() {
			return (
				<Fragment>
					<header className={classes.header}>
						<h1>
							Delicious meals, created{''} <span className={classes.highlight}>by you</span>
						</h1>
						<p>Choose your favorite recipe and cook it yourself. It is easy and fun!</p>
						<p className={classes.cta}>
							<Link href="/meals/share">Share Your Favorite Recipe</Link>
						</p>
					</header>
					<main>
						<Suspense>
							<Meals fallback={<p className={classes.loading}>Fetching meals...</p>} />
						</Suspense>
					</main>
				</Fragment>
			);
		}
	
Error handling with notFound function

	import { Fragment } from 'react';
	import classes from './page.module.css';
	import Image from 'next/image';
	import { getMeal } from '@/lib/meal';
	import { notFound } from 'next/navigation';

	export default function MealDetailsPage({ params }) {

		const meal = getMeal(params.mealSlug);

		if (!meal) {
			notFound();
		}
		
		meal.instructions = meal.instructions.replace(/\n/g, '<br />');

		return (
			...
		);	
	}
	
	The notFound function will stop the component from executing and will show the closest not found or error page.
	
Server Actions
	
	You are not allowed to have server action in client components.
	
	Use a separate file.
	
		lib/actions.js	
		
			'use server';

			/* Server Action */
			export async function shareMeal(formData) {
				/* form.get('') is using the name attribute of the input element */
				const meal = {
					title: formData.get('title'),
					summary: formData.get('summary'),
					instructions: formData.get('instructions'),
					image: formData.get('image'),
					creator: formData.get('name'),
					creator_email: formData.get('email'),
				}
				console.log(meal);
			}
			
useFormStatus()
	
	'use client'

	import { useFormStatus } from "react-dom";

	export default function MealsFormSubmit() {

		const { pending } = useFormStatus();

		return (
			<button disabled={pending}>
				{pending ? 'Submitting...' : 'Share Meal'}
			</button>
		);

	}
	
useFormState() or useActionState

	We'll use a React DOM Hook called useFormState.

	For some unknown reason, the React team decided to suddenly change this Hook's name to useActionState. 
	In addition, it now must be imported from react instead of react-dom.
	
	Use useActionState() instead of useFormState() in any other place.
	
		import { useFormState } from 'react-dom';
		import { useActionState } from 'react';
		
		
	Example of Simple Validation
	
		'use server';

		import { redirect } from "next/navigation";
		import { saveMeal } from "./meal";


		function isInvalidText(text) {
			return !text || text.trim() === '';
		}

		/* Server Action */
		export async function shareMeal(formData) {
			/* form.get('') is using the name attribute of the input element */
			const meal = {
				title: formData.get('title'),
				summary: formData.get('summary'),
				instructions: formData.get('instructions'),
				image: formData.get('image'),
				creator: formData.get('name'),
				creator_email: formData.get('email'),
			}
			//console.log(meal);

			if (
				isInvalidText(meal.title) ||
				isInvalidText(meal.summary) ||
				isInvalidText(meal.instructions) ||
				isInvalidText(meal.creator) ||
				isInvalidText(meal.creator_email) ||
				!meal.creator_email.includes('@') ||
				!meal.image || meal.image.size === 0
			) {
				throw new Error('Invalid input');
			}


			await saveMeal(meal);
			redirect('/meals');
		}
		
	Example validation with useFormState
		
		'use server';

		import { redirect } from "next/navigation";
		import { saveMeal } from "./meal";


		function isInvalidText(text) {
			return !text || text.trim() === '';
		}

		/* Server Action */
		export async function shareMeal(prevState, formData) {
			/* form.get('') is using the name attribute of the input element */
			const meal = {
				title: formData.get('title'),
				summary: formData.get('summary'),
				instructions: formData.get('instructions'),
				image: formData.get('image'),
				creator: formData.get('name'),
				creator_email: formData.get('email'),
			}

			//console.log(meal);

			if (
				isInvalidText(meal.title) ||
				isInvalidText(meal.summary) ||
				isInvalidText(meal.instructions) ||
				isInvalidText(meal.creator) ||
				isInvalidText(meal.creator_email) ||
				!meal.creator_email.includes('@') ||
				!meal.image || meal.image.size === 0
			) {
				return {
					message: 'Invalid input.'
				}
			}

			await saveMeal(meal);
			redirect('/meals');	
		}	
	
Building for Production and NextJS Caching

	npm run build
	
	Optimized code version that pre generates the pages and performs aggresive caching.
	
	Downside of this approach
		
		Data is not refetched ...
		
Run Production app
	
	npm start
	
Triggering Cache Revalidations
	
	We need to tell NextJS to throw away its caching or parts of it.
	
		'use server';

		import { redirect } from "next/navigation";
		import { saveMeal } from "./meal";
		import { revalidatePath } from "next/cache";


		function isInvalidText(text) {
			return !text || text.trim() === '';
		}

		/* Server Action */
		export async function shareMeal(prevState, formData) {
			/* form.get('') is using the name attribute of the input element */
			const meal = {
				title: formData.get('title'),
				summary: formData.get('summary'),
				instructions: formData.get('instructions'),
				image: formData.get('image'),
				creator: formData.get('name'),
				creator_email: formData.get('email'),
			}

			//console.log(meal);

			if (
				isInvalidText(meal.title) ||
				isInvalidText(meal.summary) ||
				isInvalidText(meal.instructions) ||
				isInvalidText(meal.creator) ||
				isInvalidText(meal.creator_email) ||
				!meal.creator_email.includes('@') ||
				!meal.image || meal.image.size === 0
			) {
				return {
					message: 'Invalid input.'
				}
			}


			await saveMeal(meal);
			revalidatePath('/meals');  ---> Revalidates the cache that belongs to a certain route path.
			redirect('/meals');
		}
		
	With the revalidatePath function only that path will be revalidated not nested paths.
	If you need to revalidate nested paths you need to do that individually.
	
		revalidatePath('/meals', 'layout')
		
Use S3 bucket for images

	- Instructions
		
		https://www.udemy.com/course/nextjs-react-the-complete-guide/learn/lecture/41162250#questions

	- Update the NextJS code to use those S3 images
	
		- As a first step, you can delete the public/images folder (so that an empty public/ folder remains).
		
		- Delete .next folder
		
		- To bring them back, as a first step, edit the database data by updating the initdb.js file: 
		
			Change all the image property values from image: '/images/burger.jpg', to image: 'burger.jpg' (and do that for all meals).
			
		- Next, go to the components/meals/meal-item.js file (which contains the MealItem component) and update the <Image>
		
			Previous version:
				
				import Link from 'next/link';
				import Image from 'next/image';

				import classes from './meal-item.module.css';

				export default function MealItem({ title, slug, image, summary, creator }) {
					return (
						<article className={classes.meal}>
							<header>
								<div className={classes.image}>
									<Image src={image} alt={title} fill />
								</div>
								<div className={classes.headerText}>
									<h2>{title}</h2>
									<p>by {creator}</p>
								</div>
							</header>
							<div className={classes.content}>
								<p className={classes.summary}>{summary}</p>
								<div className={classes.actions}>
									<Link href={`/meals/${slug}`}>View Details</Link>
								</div>
							</div>
						</article>
					);
				}
				
			New Version
				
				import Link from 'next/link';
				import Image from 'next/image';

				import classes from './meal-item.module.css';

				export default function MealItem({ title, slug, image, summary, creator }) {
					const s3BucketUrl = 'https://ossant-nextjs-demo-users-image.s3.us-east-2.amazonaws.com';
					return (
						<article className={classes.meal}>
							<header>
								<div className={classes.image}>
									<Image src={`${s3BucketUrl}/${image}`} alt={title} fill />
								</div>
								<div className={classes.headerText}>
									<h2>{title}</h2>
									<p>by {creator}</p>
								</div>
							</header>
							<div className={classes.content}>
								<p className={classes.summary}>{summary}</p>
								<div className={classes.actions}>
									<Link href={`/meals/${slug}`}>View Details</Link>
								</div>
							</div>
						</article>
					);
				}
		
		- You should also update the app/meals/[mealSlug]/page.js file and make sure that the image on this page is also fetched from S3.
		
			Previous version
			
				// localhost:3000/meals/something

				import { Fragment } from 'react';
				import classes from './page.module.css';
				import Image from 'next/image';
				import { getMeal } from '@/lib/meal';
				import { notFound } from 'next/navigation';

				export default function MealDetailsPage({ params }) {

					const meal = getMeal(params.mealSlug);

					if (!meal) {
						notFound();
					}
					
					meal.instructions = meal.instructions.replace(/\n/g, '<br />');

					return (
						<Fragment>
							<header className={classes.header}>
								<div className={classes.image}>
									<Image src={meal.image} alt={meal.title} fill />
								</div>
								<div className={classes.headerText}>
									<h1>{meal.title}</h1>
									<p className={classes.creator}>
										by <a href={`mailto:${meal.creator_email}`}>{meal.creator}</a>
									</p>
									<p className={classes.summary}>{meal.summary}</p>
								</div>
							</header>
							<main>
								{/* here there is a vulnerability to cross site scripting attacks */}
								<p className={classes.instructions} dangerouslySetInnerHTML={{
									__html: meal.instructions,
								}}
								></p>
							</main>
						</Fragment>
					);	
				}
			
			Updated
				
				// localhost:3000/meals/something

				import { Fragment } from 'react';
				import classes from './page.module.css';
				import Image from 'next/image';
				import { getMeal } from '@/lib/meal';
				import { notFound } from 'next/navigation';

				export default function MealDetailsPage({ params }) {

					const s3BucketUrl = 'https://ossant-nextjs-demo-users-image.s3.us-east-2.amazonaws.com';

					const meal = getMeal(params.mealSlug);

					if (!meal) {
						notFound();
					}
					
					meal.instructions = meal.instructions.replace(/\n/g, '<br />');

					return (
						<Fragment>
							<header className={classes.header}>
								<div className={classes.image}>
									<Image src={`${s3BucketUrl}/${meal.image}`} alt={meal.title} fill />
								</div>
								<div className={classes.headerText}>
									<h1>{meal.title}</h1>
									<p className={classes.creator}>
										by <a href={`mailto:${meal.creator_email}`}>{meal.creator}</a>
									</p>
									<p className={classes.summary}>{meal.summary}</p>
								</div>
							</header>
							<main>
								{/* here there is a vulnerability to cross site scripting attacks */}
								<p className={classes.instructions} dangerouslySetInnerHTML={{
									__html: meal.instructions,
								}}
								></p>
							</main>
						</Fragment>
					);	
				}
			
		- Reset the database data, delete your meals.db file (i.e., delete the SQLite database file) and re-run: node initdb.js 
			to re-initialize it (with the updated image values).
			
		- Allowing S3 as an image source
			
			- This remotePatterns config allows this specific S3 URL as a valid source for images.
			
				/** @type {import('next').NextConfig} */
				const nextConfig = {
					images: {
						remotePatterns: [
							{
								protocol: 'https',
								hostname: 'ossant-nextjs-demo-users-image.s3.us-east-2.amazonaws.com',
								port: '',
								pathname: '/**',
							},
						],
					},
				};

				export default nextConfig;

		- Storing uploaded images on S3
			
			- Install that package via npm install @aws-sdk/client-s3 --save.
			- Then, go to your lib/meals.js file and import the AWS S3 SDK (at the top of the file)
			
				import { S3 } from '@aws-sdk/client-s3';
			
				const s3 = new S3({
					region:'us-east-2'
				});
				
		- Now, edit the saveMeal() function and remove all code that was related to storing the image on the local file system.
			
			- Previous version
				
				export async function saveMeal(meal) {

					/* 
						const slug = slugify(meal.title, { lower: true });
						const instructions = xss(meal.instructions); --> Sanitizing code
					*/

					meal.slug = slugify(meal.title, { lower: true });
					meal.instructions = xss(meal.instructions);

					const extension = meal.image.name.split('.').pop();
					const fileName = `${meal.slug}.${extension}`

					const stream = fs.createWriteStream(`public/images/${fileName}`);
					const bufferedImage = await meal.image.arrayBuffer();

					stream.write(Buffer.from(bufferedImage), (error) => {
						if (error) {
							throw new Error('Saving image failed');
						}
					});

					meal.image = `/images/${fileName}`

					db.prepare(`
						INSERT INTO meals (
							title, summary, instructions, creator, creator_email, image, slug
						)
						VALUES (
							@title, @summary, @instructions, @creator, @creator_email, @image, @slug
						)
					`).run(meal);

				}
				
			- New version
				
				import sql from 'better-sqlite3';
				import slugify from 'slugify';
				import xss from 'xss';
				import { S3 } from '@aws-sdk/client-s3';

				const s3 = new S3({
					region:'us-east-2'
				});

				const db = sql('meals.db');

				export async function getMeals() {
					await new Promise((resolve) => setTimeout(resolve, 2000));
					//throw new Error('Loading meals failed');
					return db.prepare('SELECT * FROM meals').all();
				}

				export function getMeal(slug) {
					return db.prepare('SELECT * FROM meals WHERE slug = ?').get(slug);
				}

				export async function saveMeal(meal) {

					/* 
						const slug = slugify(meal.title, { lower: true });
						const instructions = xss(meal.instructions); --> Sanitizing code
					*/

					meal.slug = slugify(meal.title, { lower: true });
					meal.instructions = xss(meal.instructions);

					const extension = meal.image.name.split('.').pop();
					const fileName = `${meal.slug}.${extension}`

					const bufferedImage = await meal.image.arrayBuffer();

					s3.putObject({
						Bucket: 'ossant-nextjs-demo-users-image',
						Key: fileName,
						Body: Buffer.from(bufferedImage),
						ContentType: meal.image.type,
					});

					meal.image = fileName;

					db.prepare(`
						INSERT INTO meals (
							title, summary, instructions, creator, creator_email, image, slug
						)
						VALUES (
							@title, @summary, @instructions, @creator, @creator_email, @image, @slug
						)
					`).run(meal);

				}
		
		- Granting the NextJS backend AWS access permissions
	
			We did configure S3 to serve the bucket content to everyone.

			But we did not (and should not!) configure it to allow everyone to write to the bucket or change the bucket contents.

			But that's what our NextJS app (via the S3 AWS SDK) now tries to do!

			To grant our app appropriate permissions, you must set up AWS access keys for your app.

			This is done by adding a .env.local file to your root NextJS project. 
			
			This file will automatically be read by NextJS and the environment variables configured in there will be made 
			available to the backend (!) part of your app.
			
			In this .env.local file, you must add two key-value pairs:

				AWS_ACCESS_KEY_ID=<your aws access key>
				AWS_SECRET_ACCESS_KEY=<your aws secret access key>


Standard Routes
	
	Folder name = route path
	
	app/about -> mywebsite.com/about
	
Dynamic Routes
	
	/posts/<dynamic>
	
	Define dynamic segments by wrapping the folder name with []
	
	/app/posts/[slug] -> mywebsite.com/posts/next-js-is-awesome
	
Layout and Pages	
	
	Pages	
	
		Created via page.js file.
		Define page content (jsx) for a route.
		
	Layouts
		
		Created via layout.js file.
		Define wrapping layout for one or more pages.
		
Not Found pages	
	
	app
		news
			[slug]
				not-found.js		---> for cases when newsItem is not found
				page.js
			page.js
		layout.js
		not-found.js				---> handles all not found cases for all the app
			
Parallel Routes (@ notation for folders....

	It's a feature that allows you to render the content of two separate routes with separate paths on the same page.
	
		1. Create a layout
	
		2. Create one subfolder per parallel route. Folder name should start with @
		
	Example	
		
		app	
			archive
				@archive
					page.js
				@latest
					page.js
				layout.js
				
Catch All Routes	
	
	Standard Dynamic Route to a Catch All Route
	
		@archive
	
			[year] --> [[...filter]]
				
				page.js     ---> will be activated for any path segments after archive
			
		
Server components vs Client Components

	Example: Here this component becomes a client because of the usePathname() usage. A good practice is to 
			 isolate client components and keep server components behavior as much as possible. 
		
		'use client';

		import Link from 'next/link';
		import { usePathname } from 'next/navigation';

		export default function MainHeader() {

			/* find active path */
			const path = usePathname();

			return (
				<header id="main-header">
					<div id="logo">
						<Link href="/">NextNews</Link>
					</div>
					<nav>
						<ul>
							<li>
								{/*
									We are using startsWith function thinking on nested paths
									<Link href="/news" className={path.startsWith('/news') ? 'active' : undefined}>News</Link>
								*/}
								<Link href="/news" className={path.startsWith('/news') ? 'active' : undefined}>News</Link>
							</li>
							<li>
								<Link href="/archive" className={path.startsWith('/archive') ? 'active' : undefined}>Archive</Link>
							</li>
						</ul>
					</nav>
				</header>
			);
		}
		
	You can break it like this:
		
		Client Component
		
			'use client';

			import Link from 'next/link';
			import { usePathname } from 'next/navigation';

			/*
				We are using startsWith function thinking on nested paths
				<Link href="/news" className={path.startsWith('/news') ? 'active' : undefined}>News</Link>
			*/
			export default function NavLink({ href, children }) {

				/* find active path */
				const path = usePathname();

				return (
					<Link
						href={href}
						className={path.startsWith(href) ? 'active' : undefined}
					>
						{children}
					</Link>
				);
			}
			
		Server Component
			
			import NavLink from "./nav-link";

			export default function MainHeader() {
				return (
					<header id="main-header">
						<div id="logo">
							<Link href="/">NextNews</Link>
						</div>
						<nav>
							<ul>
								<li>
									<NavLink href="/news">News</NavLink>
								</li>
								<li>
									<NavLink href="/archive">Archive</NavLink>
								</li>
							</ul>
						</nav>
					</header>
				);
			
Programmatic Navigation
	
	'use client'
	const router = useRouter();
	
Route Handlers
	
	api
		route.js
		
		export function GET(request) {
			console.log(request);
			return new Response('Hello !');
		}

		//export function POST() {}
		
	
	http://localhost:3000/api
	
		Hello !
		
Middleware
	
	middleware.js: Set up code that will run on every request so that you can inspect, block or redirect the request.
		
		import { NextResponse } from "next/server";

		export function middleware(request) {
			console.log(request);
			return NextResponse.next();
		}

		export const config = {
			matcher: '/news'
		}
		