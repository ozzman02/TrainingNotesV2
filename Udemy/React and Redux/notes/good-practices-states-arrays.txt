Good practices when working with React States and Arrays

Add elements to the start of an array

	const addColorToTheStart = (newColor) => {
		
		const [colors, setColors] = useState([]);

		const addColor = (newColor) => {
			const updatedColors = [
				newColor, ...colors
			];
			setColors(updatedColors);
		};
	}
	
	
Add elements to the end of an array

	
	const [colors, setColors] = useState([]);

	const addColor = (newColor) => {
		const updatedColors = [
			...colors, newColor
		];
		setColors(updatedColors);
	};
	

Add elements to the middle of the array (or start or end)
	
	const [colors, setColors] = useState([]);
		
	const updatedColors = [
		...colors.slice(0, index),
		newColor,
		...colors.slice(index)
	];
		
	setColors(updatedColors);
		
	
	
Removing an element with a particular value
	
	const [colors, setColors] = useState(['red','green','blue']);
	
	// if the function returns true, we want to keep the value if not, value is not added
	const removeColor = (colorToRemove) => {
		const updatedColors = colors.filter((color, index) => {
			return color !== colorToRemove
		});
		setColors(updatedColors);
	}
	
	const removeColorAtIndex = (indexToRemove) => {
		const updatedColors = colors.filter((color, index) => {
			return indexToRemove !== index;
		});
		setColors(updatedColors);
	}

Removing an element with a particular property

	const [books, setBooks] = useState([
		{id: 1, title: 'TestBook'},
		{id: 2, title: 'TestBook2'}
	]);

	const removeBookById = (bookId) => {
		const updatedBooks = books.filter((book) => {
			return book.id !== bookId;
		});
		setColors(updatedBooks);
	}
	
Modifying an element based on a property

	const [books, setBooks] = useState([
		{id: 1, title: 'TestBook'},
		{id: 2, title: 'TestBook2'}
	]);

	const updateBookById = (bookId, newBookTitle) => {
		const updatedBooks = books.map((book) => {
			if (book.id === bookId) {
				return { ...book, title: newBookTitle };
			}
			return book;
		});
		setColors(updatedBooks);
	}
	
Adding or changing properties to an object

	const [fruit, setFruit] = useState({
		color: 'red',
		name: 'apple'
	});
	
	const changeColor = (color) => {
		const updatedFruit = {
			...fruit,
			color: color
		};
		setFruit(updatedFruit);
	};
	
Removing properties from an object

	const [fruit, setFruit] = useState({
		color: 'red',
		name: 'apple'
	});
	
	// we want to remove the color property
	// rest: the other properties
	
	const removeColor = () => {
		const { color, ...rest } = fruit;
		setFruit(rest);
	};