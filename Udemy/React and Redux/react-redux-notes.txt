How to get help	
	
	ste.grider@gmail.com
	
Github repo

	- https://github.com/StephenGrider/redux-code

Tool for making a tiny React App
	
	Original
	
		codesandbox.io/s/react-pibc94
	
	Mine
		
		https://codesandbox.io/p/sandbox/react-forked-8ryxzj?file=%2Fsrc%2FApp.js
	
	
	full code
		
		codesandbox.io/s/react-forked-m5bz37
	
		
Babel:
	
	Command line tool that can take any version of javascript and spit out a newer version
	
	website: https://babeljs.io/repl

Install Bulma (css framework)

	npm install Bulma

	
Install json server

	npm install json-server
	
	create db.json file under project root directory
	
	Modify the scripts section in package.json
	
		"scripts": {
			"start": "react-scripts start",
			"server": "json-server -p 3001 --watch db.json",
			"build": "react-scripts build",
			"test": "react-scripts test",
			"eject": "react-scripts eject"
		},
		
	Run the server
		
		npm run server
		
		
useEffect

	If you wanted to log some information when your component is first rendered to the screen and never again
	
		useEffect(() => {
			console.log("Some info");
		}, []);
	
	If you wanted to log some information when your component is first rendered to the screen and whenever it re-renders
		
		useEffect(() => {
			console.log("Some info");
		});
		
	Imagine you are creating a component that has a state variable called counter.

	You want to log info about counter at the following points in time:

		1. When the component is first rendered to the screen

		2. When the component is re-rendered, but only log info if counter changed
	
		useEffect(() => {
			console.log("Some info");
		}, [counter]);
		
		
Application State vs Component State

	Application state: Data that is used by many different components. Is often a good idea to put application state into context.
	
	Component state: Data that is used by a vey few components.
	
useCallback
	
	- Hook to help you tell React that your function isn't actually changing over time.
	
	- Fixes bugs around useEffect and other similar situations
	
	- Follow similar conventions as useEffect (second argument is an array)
	
PropTypes
	
	npm install prop-types
	
Tailwind
	
	npm install -D tailwindcss postcss autoprefixer

	npx tailwindcss init -p
	
	npm install tailwind-merge

classnames library
	
	npm install classnames
	
react-icons

	npm install react-icons --save

	
	
/************************************************************************************************************************************************************************/
Old Notes
	
Javascript Modules

	- ES2015 Modules 	(import: ES2015 import statement)
	- CommonJS Modules 	(require: CommonJS import statement)
	
JSX
	
	- Special dialect of JS (it's not HTML)
	- Browsers do not understand JSX code! We write JSX then run tools to turn it into JS
	- Very similar in form and function to HTML with a couple differences
	
	JSX vs HTML
		
		- Adding custom styling to an element uses different syntax.
		- Adding a class to an element uses different syntax.
		- JSX can reference JS variables.
		- {{}} indicates JS object
		- {} indicates JS variable
		- Check property names. 
			
			Example: 
			
				/* React error if you inspect the console */
				<label className="label" For="name">{labelText}</label>

				/* Solution replace the For with htmlFor */
				<label className="label" htmlFor="name">{labelText}</label>
		
		- Values that JSX can't show
		
			- We are not allowed to take a JS object and reference it inside of JSX specifically when we want to show text.
			
				/* Error */
				const buttonText = {text: 'Click me'};
				<button style={{ backgroundColor: 'blue', color: 'white' }}>{buttonText}</button>
				
				/* Valid */
				const buttonText = {text: 'Click me'};
				<button style={{ backgroundColor: 'blue', color: 'white' }}>{buttonText.text}</button>
	
	Props System
	
		- System for passing data from a parent component to a child component.
		- Goal is to customize or configure a child component.
		- A child cannot pass data back up to the parent.
		
React Component:

	- Is a function or class that produces HTML to show the user (using JSX) and handles feedback from the user (using Event Handlers)
	
	const App = function() {
		return <div>Hi there!</div>
	}
	
	/* ES2015 */
	const App = () => {
		return <div>Hi there!</div>
	}
	
	Three Tenets of Components
	
		- Component Nesting
	
		- Component Reusability
	
		- Component Configuration
	
	Components
	
		- Functional Components: Good for simple content
		
		- Class Components: Good for just about everything else
		
			Benefits
			
				- Easier code organization
				- Can't use 'state' (another React system) -----> easier to handle user input
				- Understand lifecycle events ----> easier to do things when the app first start
			
			Rules
				
				- Must be a Javascript class
				- Must extend (subclass) React.Component
				- Must define render method that returns some amount of JSX
				
			State in React Components
			
				- Only usable with class components
				- You will confuse props with state
				- State is JS object that contains data relevant to a component
				- Updating state on a component causes the component to almost instantly render
				- State must be initialized when a component is created
				- State can only be updated using the function 'setState'
				
LifeCycle method

	- Constructor: Good place to do one time setup
	- Render: Avoid doing anything besides returning JSX
	- componentDidMount: Good place to do data loading
	- componentDidUpdate: Good place to do more data loading when state/props change
	- componentWillUnmount: Good place to do cleanup (specially for non react stuff)
	
	Other lifecycle methods:
	
		- shouldComponentUpdate
		- getDerivedStateFromProps
		- getSnapshotBeforeUpdate
		
		
Event Handlers

	Example:

		import React from 'react';

		class SearchBar extends React.Component {

			onInputChange(event) {
				console.log(event.target.value);
			}

			render() {
				return (
					<div className="ui segment">
						<form className="ui form">
							<div className="field">
								<label>Image Search</label>
                        
								{/* this.onInputChange is a callback function since we are not using (). 
									if we use () the method is going to be called everytime that the component is rendered */}
                            
								<input type="text" onChange={this.onInputChange} />
							</div>
						</form>
					</div>
				);
			}
		}
	
		export default SearchBar;
	
	Alternate Syntax:
	
		import React from 'react';
	
		class SearchBar extends React.Component {

			render() {
				return (
					<div className="ui segment">
						<form className="ui form">
							<div className="field">
								<label>Image Search</label>
                        
								{/* Alternate Syntax */}
                            
								<input type="text" onChange={(event) => console.log(event.target.value)} />
							</div>
						</form>
					</div>
				);
			}
		}
	
		export default SearchBar;
		
Understanding This

	- What is this used for in a class?
	
		This is a reference to the class.
	
	- How is the value of this determined in a function?
	
		Don't look at the function, take a look at how the function is called. Look at what is left of the dot.
		
			truck.driveMyTruck(); // this is a reference to truck.
			
			
			
	Issue: TypeError: Cannot read property 'sound' of undefined
	
		class Car {
			setDriveSound(sound) {
				this.sound = sound;
			}
			drive() {
				return this.sound;
			}
		}

		const car = new Car();
		car.setDriveSound('vroom');

		const drive = car.drive;

		drive();
		
		
	Solution 1: Define a constructor and bind the function
	
		class Car {
			constructor() {
				this.drive = this.drive.bind(this);
			}
			setDriveSound(sound) {
				this.sound = sound;
			}
			drive() {
				return this.sound;
			}
		}

		const car = new Car();
		car.setDriveSound('vroom');

		const drive = car.drive;

		drive();
	
	Solution 2: Turn the function into an arrow function to automatically bind the value of this 
	
		class SearchBar extends React.Component {

			state = { term: ''};
			
			/* the arrow function makes sure that the value of this is always equals to an instance of SearchBar */
			onFormSubmit = (event) => {
				event.preventDefault();
				console.log(this.state.term);
			}
		
			...
		}
	
	Solution 3: Instead of defining a method as an arrow function, pass an
	arrow function directly into the event
	
		render() {
			return (
				<div className="ui segment">
					<form className="ui form" onSubmit={(event) => this.onFormSubmit(event)}>
						<div className="field">
							<label>Image Search</label>
							<input 
								type="text" 
								value={this.state.term} 
								onChange={(e) => this.setState({ term: e.target.value })} 
							/>
						</div>
					</form>
				</div>
			);
		}
		
Making API requests with AJAX

	- Axios
		
		npm install --save axios
		
	- Fetch
	
	Handling Async requests (with axios):
	
		Method 1: handling a promise with .then function
		
			onSearchSubmit(term) {
				axios.get('https://api.unsplash.com/search/photos', {
					params: { query: term },
					headers: {
						Authorization: 'Client-ID b0ce22e08331fdd00b7a552538ed53e4366e62c06eaf73c38231670368998cd6'
					}
				}).then( (response) => {
					console.log(response.data.res
					ults);
				});
			}
		
		Method 2: async await
		
			async onSearchSubmit(term) {
				const response = await axios.get('https://api.unsplash.com/search/photos', {
					params: { query: term },
					headers: {
						Authorization: 'Client-ID b0ce22e08331fdd00b7a552538ed53e4366e62c06eaf73c38231670368998cd6'
					}
				});

				console.log(response.data.results);
			}
			
Accessing the DOM with Refs

	- Access the DOM with traditional javascript example
	
		document.querySelector('img').clientHeight
		
	- In React we use the ref system
		
		- Gives access to a single DOM element.
		- We create refs in the constructor, assign them to instance variables, then pass to a particular JSX element as props.
		
		
Redux

	- State management library
	- Makes creating complex applications easier
	- Not required to create React app
	- Not explicitly designed to work with React
	
	Cycle
	
		Action Creator ----> Action ----> dispatch ----> Reducers ----> State
			

General data loading with Redux

	- Component gets rendered onto the screen.
	- Component's 'componentDidMount' lifecycle method gets called.
	- We call action creator from 'componentDidMount'.
	- Action creator runs code to make an API request.
	- API responds with data.
	- Action creator returns an 'action' with the fetched data on the 'payload' property.
	- Some reducer sees the action, returns the data off the 'payload'.
	- Because we generated some new state object, redux/react-redux cause our React app to be re-rendered.
	
	
	* Components are generally responsible for fetching data they need by calling an action creator.
	* Action creators are responsible for making API requests. (This is where redux-thunk comes into play)
	* We get fetched data into a component by generating new state in our redux store, then getting that into our component through mapStateToProps
	

Synchronous action creator: Instantly returns an action with data ready to go.

Asynchronous action creator: Takes some amount of time for it to get its data ready to go.

Middleware in Redux

	- Function that gets called with every action we dispatch
	- Has the ability to stop, modify or otherwise mess around with actions
	- Tons of open source middleware exist
	- Most popular use of middleware is for dealing with async actions.
	- We are going to use redux-thunk to solve our async issues.
	
	Cycle
	
		Action Creator ----> Action ----> dispatch ----> Middleware ----> Reducers ----> State
	
Rules with redux-thunk

	- Action creators can return action objects or functions.
	- If an action object gets returned, it must have a type.
	- If an action object gets returned, it can optionally have a payload.
		
Create React app

	- npm install -g create-react-app
	- create-react-app jsx
	
Create React app with Redux

	- create-react-app songs
	- npm install --save redux react-redux
	
Create React app with redux, react-redux, axios and redux-thunk
	
	- create-react-app blog
	- npm install --save redux react-redux axios redux-thunk
	
	redux: 			redux library
	react-redux: 	Integration layer between react and redux
	axios: 			Helps us make network requests
	redux-thunk: 	Middleware to help us make requests in a redux application
	
Rules of Reducers

	- Must return any value besides 'undefined'
	- Produces 'state' or data to be used inside of your app using only previous state and the action (reducers are pure)
	- Must not return reach 'out of itself' to decide what value to return.
	- Must not mutate its input 'state' argument.
	
	
Manipulate arrays without mutating them (important to handle this inside reducers)

	Add an element:
	
		const colors = ['red', 'green'];
		[...colors, 'blue'];
		result: ["red", "green", "blue"]
		
		['purple', ...colors];
		
	Removing an element:
		
		colors.filter(color => color !== 'green');
	
	Update properties:
	
		const profile = { name: 'Sam' };
		
		{ ...profile, name:'Alex' }
		{ ...profile, age:30 }
		{ ...profile, name:'Alex' }
		
	Delete property:
	
		_.omit(profile, 'name');
		
	
Start the application

	- npm start
	- http://localhost:3000
	
	
	