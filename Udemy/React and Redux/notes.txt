How to get help	
	
	ste.grider@gmail.com
	
Github repo

	- https://github.com/StephenGrider/redux-code

Tool for making a tiny React App

	goo.gl/T6zQ9q
	
Babel:
	
	Command line tool that can take any version of javascript and spit out a newer version
	
	website: https://babeljs.io/
	
Javascript Modules

	- ES2015 Modules 	(import: ES2015 import statement)
	- CommonJS Modules 	(require: CommonJS import statement)
	
JSX
	
	- Special dialect of JS (it's not HTML)
	- Browsers do not understand JSX code! We write JSX then run tools to turn it into JS
	- Very similar in form and function to HTML with a couple differences
	
	JSX vs HTML
		
		- Adding custom styling to an element uses different syntax.
		- Adding a class to an element uses different syntax.
		- JSX can reference JS variables.
		- {{}} indicates JS object
		- {} indicates JS variable
		- Check property names. 
			
			Example: 
			
				/* React error if you inspect the console */
				<label className="label" For="name">{labelText}</label>

				/* Solution replace the For with htmlFor */
				<label className="label" htmlFor="name">{labelText}</label>
		
		- Values that JSX can't show
		
			- We are not allowed to take a JS object and reference it inside of JSX specifically when we want to show text.
			
				/* Error */
				const buttonText = {text: 'Click me'};
				<button style={{ backgroundColor: 'blue', color: 'white' }}>{buttonText}</button>
				
				/* Valid */
				const buttonText = {text: 'Click me'};
				<button style={{ backgroundColor: 'blue', color: 'white' }}>{buttonText.text}</button>
	
	Props System
	
		- System for passing data from a parent component to a child component.
		- Goal is to customize or configure a child component.
		- A child cannot pass data back up to the parent.
		
React Component:

	- Is a function or class that produces HTML to show the user (using JSX)and handles feedback from the user (using Event Handlers)
	
	const App = function() {
		return <div>Hi there!</div>
	}
	
	/* ES2015 */
	const App = () => {
		return <div>Hi there!</div>
	}
	
	Three Tenets of Components
	
		- Component Nesting
	
		- Component Reusability
	
		- Component Configuration
	
	Components
	
		- Functional Components: Good for simple content
		
		- Class Components: Good for just about everything else
		
			Benefits
			
				- Easier code organization
				- Can't use 'state' (another React system) -----> easier to handle user input
				- Understand lifecycle events ----> easier to do things when the app first start
			
			Rules
				
				- Must be a Javascript class
				- Must extend (subclass) React.Component
				- Must define render method that returns some amount of JSX
				
			State in React Components
			
				- Only usable with class components
				- You will confuse props with state
				- State is JS object that contains data relevant to a component
				- Updating state on a component causes the component to almost instantly render
				- State must be initialized when a component is created
				- State can only be updated using the function 'setState'
				
LifeCycle method

	- Constructor: Good place to do one time setup
	- Render: Avoid doing anything besides returning JSX
	- componentDidMount: Good place to do data loading
	- componentDidUpdate: Good place to do more data loading when state/props change
	- componentWillUnmount: Good place to do cleanup (specially for non react stuff)
	
	Other lifecycle methods:
	
		- shouldComponentUpdate
		- getDerivedStateFromProps
		- getSnapshotBeforeUpdate
		
		
Event Handlers

	Example:

		import React from 'react';

		class SearchBar extends React.Component {

			onInputChange(event) {
				console.log(event.target.value);
			}

			render() {
				return (
					<div className="ui segment">
						<form className="ui form">
							<div className="field">
								<label>Image Search</label>
                        
								{/* this.onInputChange is a callback function since we are not using (). 
									if we use () the method is going to be called everytime that the component is rendered */}
                            
								<input type="text" onChange={this.onInputChange} />
							</div>
						</form>
					</div>
				);
			}
		}
	
		export default SearchBar;
	
	Alternate Syntax:
	
		import React from 'react';
	
		class SearchBar extends React.Component {

			render() {
				return (
					<div className="ui segment">
						<form className="ui form">
							<div className="field">
								<label>Image Search</label>
                        
								{/* Alternate Syntax */}
                            
								<input type="text" onChange={(event) => console.log(event.target.value)} />
							</div>
						</form>
					</div>
				);
			}
		}
	
		export default SearchBar;
		
Understanding This

	- What is this used for in a class?
	
		This is a reference to the class.
	
	- How is the value of this determined in a function?
	
		Don't look at the function, take a look at how the function is called. Look at what is left of the dot.
		
			truck.driveMyTruck(); // this is a reference to truck.
			
			
			
	Issue: TypeError: Cannot read property 'sound' of undefined
	
		class Car {
			setDriveSound(sound) {
				this.sound = sound;
			}
			drive() {
				return this.sound;
			}
		}

		const car = new Car();
		car.setDriveSound('vroom');

		const drive = car.drive;

		drive();
		
		
	Solution 1: Define a constructor and bind the function
	
		class Car {
			constructor() {
				this.drive = this.drive.bind(this);
			}
			setDriveSound(sound) {
				this.sound = sound;
			}
			drive() {
				return this.sound;
			}
		}

		const car = new Car();
		car.setDriveSound('vroom');

		const drive = car.drive;

		drive();
	
	Solution 2: Turn the function into an arrow function to automatically bind the value of this 
	
		class SearchBar extends React.Component {

			state = { term: ''};
			
			/* the arrow function makes sure that the value of this is always equals to an instance of SearchBar */
			onFormSubmit = (event) => {
				event.preventDefault();
				console.log(this.state.term);
			}
		
			...
		}
	
	Solution 3: Instead of defining a method as an arrow function, pass an arrow function directly into the event
	
		render() {
			return (
				<div className="ui segment">
					<form className="ui form" onSubmit={(event) => this.onFormSubmit(event)}>
						<div className="field">
							<label>Image Search</label>
							<input 
								type="text" 
								value={this.state.term} 
								onChange={(e) => this.setState({ term: e.target.value })} 
							/>
						</div>
					</form>
				</div>
			);
		}
		

Create React app

	- npm install -g create-react-app
	- create-react-app jsx
	
Start the application

	- npm start
	- http://localhost:3000
	
	
	