Kotlin for Java Developers

Parameter hints

	Basically from Intellij you can enable parameter hints. In this case height and width are parameter hints but
	if another developer uses a different IDE they will not be visible for them because parameter hints are not code.
	
	If you disable parameter hints, you can still pass height and width but that means they are going to be code that 
	the compiler will read.
	
	Example:
	
		fun main(args: Array<String>) {
			area(height = 20, width = 10)
		}
	
		fun area(width: Int, height: Int) {
			println("width = $width and height = $height")
		}
		
What is Kotlin
	
	JetBrains decided to create its own language to overcome the challenges of working with a large Java code base.
	
		- Runs anywhere the JVM can run.
	
		- Statically typed.
	
		- Objected oriented.
	
		- Functional programming.
	
		- Conciseness.
	
		- Safety.
	
		- Pragmatism.
		
		- Interoperability.
		
	
IDEA's Java to Kotlin Converter

	Copy the java code into a Kotlin file and follow the IDE instructions.

	
Kotlin Standard Library

	https://kotlinlang.org/api/latest/jvm/stdlib/
	
	Default imports:
		
		- kotlin.*
		- kotlin.annotation.*
		- kotlin.collections.*
		- kotlin.comparisons.*
		- kotlin.io.*
		- kotlin.ranges.*
		- kotlin.sequences.*
		- kotlin.text.*
		- kotlin.jvm.* (JVM only)
		- java.lang.* (JVM only)
		
Variable Declarations

	var -> mutable
	val -> inmmutable
	
	fun main(args: Array<String>) {

		val number = 25
		val number2: Int = 25
		val number3: Short = 25
		val number4 = 100;

		val employee1 = Employee("Lynn Jones", 500)
		employee1.name = "Lynn Smith"

		val employee2: Employee

		if (number < number4) {
			employee2 = Employee("Jane Smith", 400)
		} else {
			employee2 = Employee("Mike Watson", 150)
		}
		
		val names = arrayListOf("John", "Jane", "Mary")
		println(names[1])
		
	}

	class Employee(var name: String, val id: Int) {

	}
	
Type Aliases
	
	package declarations

	typealias EmployeeSet = Set<Employee>

	fun main(args: Array<String>) {
		val employees: EmployeeSet
	}

	class Employee(var name: String, val id: Int) {
	}
	
Equality

	fun main(args: Array<String>) {

		val employee1 = Employee("Mary", 1)
		val employee2 = Employee("John", 2)
		val employee3 = Employee("John", 2)

		// For structural equality we use == instead of equals method

		println(employee1 == employee2)         // In Kotlin -> false   In Java -> false
		println(employee2 == employee3)         // In Kotlin -> true    In Java -> false
		println(employee1.equals(employee2))    // In Kotlin -> false   In Java -> false
		println(employee2.equals(employee3))    // In Kotlin -> true    In Java -> true

		// For referential equality we use ===

		println(employee1 === employee2)   // false
		println(employee2 === employee3)   // false

		println(employee1 != employee2)    // true
		println(employee3 !== employee3)   // false
	}

	class Employee(var name: String, val id: Int) {

		override fun equals(other: Any?): Boolean {
			if (other is Employee) {
				return name == other.name && id == other.id
			}
			return false
		}

		override fun hashCode(): Int {
			var result = name.hashCode()
			result = 31 * result + id
			return result
		}
	}
	
Bit Operators and Smart Casting
	
	package declarations


	fun main(args: Array<String>) {

		val employee1 = Employee("Fred", 1)
		val employee2 = Employee("John", 1)

		val x = 0x00101101
		val y = 0x11011011

		val something: Any = employee1
		val something2: Any = employee2;

		if (something is Employee) {
			val newEmployee = something as Employee;
			println(newEmployee.name)
		}

		if (something2 is Employee) {
			println(something2.name)
		}

	}

	class Employee(var name: String, val id: Int) {

		override fun equals(other: Any?): Boolean {
			if (other is Employee) {
				return name == other.name && id == other.id
			}
			return false
		}

		override fun hashCode(): Int {
			var result = name.hashCode()
			result = 31 * result + id
			return result
		}
	}
	
String templates

	package declarations

	fun main(args: Array<String>) {

		val employee1 = Employee("Fred", 1)
		val employee2 = Employee("John", 2)

		println(employee1)

		val change = 4.22

		println("To show the value of change, we use \$change")
		println("To show the value of change, we use $change")
		println("To show the value of change, we use $$change")
		println("Your change is $")

		val numerator = 10.99
		val denominator = 20.00

		println("The value of $numerator divided by $denominator is ${numerator / denominator}")

		println("The employee's id is ${employee1.id}")

	}

	class Employee(var name: String, val id: Int) {

		override fun toString(): String {
			return "Employee(name=$name, id=$id)"
		}

	}
	
Raw Strings

	fun main(args: Array<String>) {
    
		val numerator = 10.99
		val denominator = 20.00

		println("The value of $numerator divided by $denominator is ${numerator / denominator}")
		
		val filePath = """c:\somedir\somedir2"""

		val longText = """
			Test Test Test Test Test Test Test Test Test Test Test
			Test Test Test Test Test 
			Test Test
			Test
		""".trimIndent()

		val longText2 = """
			*Test Test Test Test Test Test Test Test Test Test Test
			*Test Test Test Test Test 
			*Test Test
			*Test
		""".trimMargin("*")

		val otherTest = "Other test"

		// default is |
		val longText3 = """$otherTest
			|$otherTest Test Test Test Test Test Test Test Test Test Test
			|$otherTest Test Test Test Test 
			|$otherTest Test
			|$otherTest
		""".trimMargin()



		println(filePath)

		println(longText)

		println(longText2)

		println(longText3)

	}
	
REPL (Read Eval Print Loop)

	Tools -> Kotlin -> Kotlin RELP
	
Data Types and Null Reference Handling

	There is no automatic widening of numbers in Kotlin.
	
	You can't assign numeric values to char.
	
	Any, Unit, Nothing:
	
		The Any class is like Object in Java. Is the root of any Kotlin object/class.
		It has definitions for toString, hascode and equals.
		
		Unit is equivalent to void. It returns a singleton Unit instance.
		
		Nothing is a subclass of Every class. You can use Nothing wherever you use Any.
		
	We can do this:
	
		val myInt = 10

		println("default datatype is ${myInt is Int}")

		var myLong = 22L

		myLong = myInt.toLong();

		val myByte: Byte = 111

		var myShort: Short = myByte.toShort()

		val anotherInt = 5

		var myDouble = 65.986

		println(myDouble is Double)

		val myFloat = 838.849F
		println("this is a float: ${myFloat is Float}")

		myDouble = myFloat.toDouble()

		val char = 'b'

		val myCharInt = 65

		println(myCharInt.toChar())

		val myBoolean = true

		val myFalseBoolean:Boolean = false
		
		// Calling a Java class

		val vacationTime = false
		val onVacation = DummyClass().isVacationTime(vacationTime)
		println(onVacation)

		// Any
		
		val anything: Any
		
	Arrays

		val names = arrayOf("John", "Jane", "Jill", "Joe")

		val longs1 = arrayOf(1L, 2L, 3L)

		val longs2 = arrayOf<Long>(1, 2, 3)

		val longs3 = arrayOf(1, 2, 3) // int values

		println(longs2 is Array<Long>)
		println(longs3 is Array<Int>)

		println(longs1[2])

		// array of 16 elements
		val evenNumbers = Array(16) {i -> i * 2}

		/*for (number in evenNumbers) {
			println(number)
		}*/

		println(evenNumbers.contentToString())

		val lotsOfNumbers = Array(100000) {i -> i + 1}

		val allZeroes = Array(100) { 0 }

		var someArray: Array<Int>

		someArray = arrayOf(1, 2, 3, 4)

		/*for (number in someArray) {
			println(number)
		}*/

		println(someArray.contentToString())

		someArray = Array(6) { i -> (i + 1) * 10 }

		/*for (number in someArray) {
			println(number)
		}*/

		println(someArray.contentToString())

		val mixedArray = arrayOf("hello", 22, BigDecimal(10.5), 'A')

		/*for (element in mixedArray) {
			println(element)
		}*/

		println(mixedArray.contentToString())

		println(mixedArray.isArrayOf<Any>())

		val myIntArray = arrayOf(3, 4, 5, 100)

		DummyClass().printNumbers(myIntArray.toIntArray())

		val myIntArray2 = intArrayOf(3, 7, 8, 88)
		DummyClass().printNumbers(myIntArray2)

		var someOtherArray = IntArray(5)

		/*for (number in someOtherArray) {
			println(number)
		}*/

		println(someOtherArray.contentToString())

		DummyClass().printNumbers(evenNumbers.toIntArray())

		val collection = listOf(1, 2, 3)
		val array: Array<Int> = collection.toTypedArray()
		println(array.contentToString())

Null References

	Best practice is to not define null values.
	
	With ? you will never get a null pointer exception
	
	With !! you want a null pointer exception to be thrown
	
	// nullable variable
    val str: String? = null

    // nullable variable
    val str2: String? = "This isn't null"

    if (str2 != null) {
        str2.uppercase()
    }

    // instead of using if to check null use the line below
    str2?.uppercase()

    val str3: String? = null
    // There is no null pointer exception
    println("What happens when we do this: ${str3?.uppercase()}")

    val str4: String? = "Test"
    println("What happens when we do this: ${str4?.uppercase()}")

    // safe cast operator
    // val countryCode: String? = bankBranch?.address?.country?.countryCode

    // Elvis operator allows to assign a default value if a variable is null
    val str5 = str ?: "This is the default value"
    println(str5)

    // val countryCode: = bankBranch?.address?.country ?: "US"

    val something: Any = arrayOf(1, 2, 3, 4)
    val str6 = something as? String
    println(str6?.uppercase())

	// non null assertion
    // with ? you will never get a null pointer exception
    val str7: String? = null
    val test = str7!!.uppercase();

    if (str7 == null) {
        throw Exception()
    } else {
        str7.uppercase();
    }
	
	
	-----------------------------------------------------------------------------------
	Calling a method that expects a non null value but you have a nullable value
	
	val str: String? = "This is not null"
	
	// we want to achieve this:
	if (str != null) {
		printText(str)
	}
	
	// best way to achieve
	str?.let { printText(it) }
	
	
	fun printText(text: String) {
		println(text)
	}
	
	-----------------------------------------------------------------------------------
	Arrays
	
	
	