Loops, If, When and Try Catch

	- Ranges are inclusive
	
	package loops

	fun main() {
		val range = 1..5

		for (i in range) {
			println(i)
		}

		println()

		val charRange = 'a'..'z'

		val stringRange = "ABD".."XYZ"

		println(3 in range)
		println('q' in charRange)
		println("CCC" in stringRange)
		println("CCCCCCC" in stringRange)
		println("ZZZZZZ" in stringRange)

		val backwardRange = 5.downTo(1)
		val r = 5..1
		println(5 in r)
		println(5 in backwardRange)

		val stepRange = 3..15

		println()

		for (n in stepRange) {
			println(n)
		}

		println()

		val stepThree = stepRange.step(3)

		for (n in stepThree) {
			println(n)
		}

		val reverseRange = range.reversed()

		println()

		for (n in reverseRange) {
			println(n)
		}

		println()

		val str = "Hello"
		for (c in str) {
			println(c)
		}

		println()

		for (num in 1..20 step 4) {
			println(num)
		}

		println()

		for (i in 20 downTo 15) {
			println(i)
		}

		println()

		for (i in 20 downTo 10 step 5) {
			println(i)
		}

		println()

		for (i in 1 until 10) {
			println(i)
		}

		println()

		val s = "goodbye"
		val sRange = 0..s.length

	}
	
	fun main() {
		val seasons = arrayOf("spring", "summer", "winter", "fall")
		for (season in seasons) {
			println(season)
		}

		println()

		for (index in seasons.indices) {
			println("${seasons[index]} is season number $index")
		}

		println()

		seasons.forEach { println(it) }

		println()

		seasons.forEachIndexed { index, value -> println("$value is season number $index") }

		println()

		val notASeason = "whatever" !in seasons
		println(notASeason)

		println()

		val notInRange = 32 !in 1..10
		println(notInRange)

		println()

		val str = "Hello"
		println('e' in str)
		println('e' !in str)

		println()

		for (i in 1..3) {
			println("i = $i")
			jLoop@ for (j in 1..4) {
				println("j = $j")
				for (k in 5..10) {
					println("k = $k")
					if (k == 7) {
						break@jLoop // we can use continue
					}
				}
			}
		}
	}
	
If expression

	package ifexpression

	fun main() {
		val someCondition = 69 < 22
		val num = if (someCondition) 50 else 592

		println(num)

		if (someCondition) {
			println("something")
		} else {
			println("something else")
		}

		val num2 = if (someCondition) {
			println("something")
			50
		} else {
			println("something else")
			592
		}

		println(num2)

		println("The result of the if expression is ${if (someCondition) {
			println("something")
			50
		} else {
			println("something else")
			592
		}}")

		val x = if (someCondition) println("something") else println("something else")
		println(x)
		println(x.javaClass)

	}

When
	
	package `when`

	import java.math.BigDecimal

	enum class Season {
		SPRING, SUMMER, FALL, WINTER
	}

	fun main() {

		val timeOfYear = Season.WINTER

		val str = when (timeOfYear) {
			Season.SPRING -> "Flowers are blooming"
			Season.SUMMER -> "It's hot!"
			Season.FALL -> "It's getting cooler"
			Season.WINTER -> "I need a coat"
		}
		println(str)

		val num = 100
		when (num) {
			100, 600 -> println("600")
			in 601..900 -> println("601 - 900")
			300 -> println("300")
			else -> println("Does not match anything");
		}

		val num2 = -50

		when {
			num < num2 -> println("num is less than num2")
			num > num2 -> println("num is greater than num2")
			else -> println("num is equal to num2")
		}

		val y = 10
		when (num) {
			y + 80 -> println("90")
			y + 90 -> println("100")
			else -> println("Does not match anything");
		}

		val obj: Any = "I'm a string"
		val obj2: Any = BigDecimal(25.2)
		val obj3: Any = 45

		val something: Any = obj2

		if (something is String) {
			println(something.uppercase())
		} else if (something is BigDecimal) {
			println(something.remainder(BigDecimal(10.5)))
		} else if (something is Int) {
			println("${something - 22}")
		}

		when (something) {
			is String -> println(something.uppercase())
			is BigDecimal -> println(something.remainder(BigDecimal(10.5)))
			is Int -> println("${something - 22}")
			else -> println("I have no idea what type this is")
		}

		val result = when (something) {
			is String -> {
				println(something.uppercase())
				1
			}
			is BigDecimal -> {
				println(something.remainder(BigDecimal(10.5)))
				2
			}
			is Int -> {
				println("${something - 22}")
				3
			}
			else -> {
				println("I have no idea what type this is")
				-1
			}
		}
		println(result)
	}

