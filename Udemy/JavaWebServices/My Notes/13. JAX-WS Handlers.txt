13. JAX-WS Handlers

	Why and When ?
	
		Authentication: 
			
			Implement custom authentication. 
			When you do not want to use the token authentication profile.
			You want to include your own SOAP Headers.
			
		Caching:
		
			Handler to cache the responses. If it is the same request then the response can be sent from the cache 
			instead of calling into the web server endpoint.
			
		Versioning:
		
			Maintain a legacy application that has different versions of the same exact web service in the same
			application. We have to decide which web service will service a particular request based on the version
			that comes in the soap header.
			
	
	Types of JAX-WS Handlers
	
		SOAP Handlers: Have access to the entire message, they have access to the protocol information like HTTP Headers and Body
		<soap-header>, <soap-body>
		
		Logical Handlers: When we want to access just Payload information that is whatever goes in the soap body.
		
	
	Implementation
	
		SOAPHandler interface: SOAPHandler<SOAPMessageContext> which wraps the entire soap information.
		
		Methods:
			
			handleMessage
			handleFault
			getHeaders
			close
			
		LogicalHandler interface: LogicalHandler<LogicalMessageContext> only deals with body (Payload)
		
		Methods:
		
			handleMessage
			handleFault
			close
			
		
	Steps
	
		1. Design the handler chain.
		2. Create the handlers.
		3. Configure the handlers.
		4. Rebuild and Deploy.
			