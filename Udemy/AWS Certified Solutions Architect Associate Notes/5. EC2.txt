What is EC2?

	Is a web service that provides resizable compute capacity in the cloud. Amazon EC2 reduces the time required to obtain and boot new server
	instances to minutes, allowing you to quickly scale capacity, both up and down, as your computing requirements change.
	Amazon EC2 changes the economics of computing by allowing you to pay only for capacity that you actually use. Amazon EC2 provides developers
	the tools to build failure resilient applications and isolate themselves from common failure scenarios.
	
	EC2 Options
	
		On Demand: Allow you to pay a fixed rate by the hour with not commitment.
				
			Users that want the low cost and flexibility of Amazon EC2 without any up-front payment or long-term commitment.
			Applications with short term, spiky or unpredictable workloads that cannot be interrupted.
			Applications being developed or tested on Amazon EC2 for the first time.
			
		Reserved: Provide you with a capacity reservation, and offer a significant discount on the hourly charge for an instance. 1 Year or 3 Year Terms.
		
			Applications with steady state or predictable usage.
			Applications that require reserved capacity.
			Users able to make up-front payments to reduce their total computing costs even further.
			
		Spot: Enable you to bid whatever price you want for instance capacity, providing for even greater savings if your applications have flexible start
		end times.
		
			Applications that have flexible start and end times.
			Applications that are only feasible at very low compute prices.
			Users with urgent computing needs for large amounts of additional capacity.
			
			* Exam Tip:
			if the spot instance is terminated by Amazon EC2, you will not be charged for a partial hour of usage.
			However, if you terminate the instance yourself, you will be charged for any hour in which the instance
			ran.
		
	EC2 Instance Types
	
		D for density
		I for IOPS
		R for RAM
		T cheap general purpose (T2 micro)
		M main choice for general purpose apps
		C for compute
		G for graphics
		
What is EBS (Elastic Block Storage)

	Allows you to create storage volumes and attach them to Amazon EC2 instances. Once attached, you can create a file system on top
	of these volumes, run a database, or use them in any other way you would use a block device. EBS volumes are placed in a specific
	Availability Zone, where they are automatically replicated to protect you from the failure of a single component.
	
	EBS Volumen Types
		
		General Purpose SSD (GP2)
		
			Designed for 99.999% availability.
			Ratio of 3 IOPS per GB with up to 10,000 IOPS and the ability to burst up to 3000 IOPS for short periods for volumes under 1 GB.
		
		Provisioned IOPS SSD (IO1)
			
			Designed for I/O intensive applications such as large relational or NoSQL databases. Use if you need more than 10,000 IOPS.
			
		Magnetic (Standard)
		
			Lowest cost per GB of all EBS volumen types. Magnetic volumes are ideal for workloads where data is accessed infrequently, and
			applications where the lowest storage cost is important.
			
			
		*IOPS stands for Input Output Operations per Second
		
Exam Tips

	Know the difference between On Demand, Spot, Reserved
	
	Remember with spot instances
		if you terminate the instance you pay for the hour.
		if AWS terminates the spot instance, you get the hour it was terminated in for free.
	 
	EBS consists of:
		General Purpose SSD - GP2 (Up to 10,000 IOPS)
		Provisioned IOPS SSD - I01 (More than 10,000 IOPS)
		Magnetic - cheap infrequently accessed storage
		
	You cannot mount 1 EBS volume to multiple EC2 instances, instead use EFS (Elastic File System)
	
	EC2 Instance Types

	Launching an EC2 instance
	
		When adding storage the delete on termination option for the root volume is checked by default.
		Root volume is not encrypted by default.
		
Security Groups

	All inbound traffic is blocked by default. Inboud rules: Everything is denied by default, you need to allow protocols. 
	You cannot denied a specific protocol, you can only allow.
	
	All outbound traffic is allowed by default.
	
	Changes to security groups take effect immediately.
	
	You can have any number of ec2 instances within a security group.
	
	Security groups are stateful. If you create an inbound rule allowing traffic in, that traffic is automatically allowed back
	out again.
	
Volumen vs Snapshots

	Volumes exist on EBS
		Virtual Hard Disk
	
	Snapshots exist on S3
	
	You can take a snapshot of a volume, this will store that volume on S3.
	
	Snapshots are point in time copies of volumes.
	
	Snapshots are incremental, this means that only the blocks that have changed since your last snapshot are moved to S3.
	
	If this is your first snapshot, it may take some time to create.
	
	---------------------------------------------------------------------------------------------------------------------------------
	- create a volume in the management console
	- ssh to the ec2 instance
	- in the command line:
		
		1. run lsblk command
		
		[root@ip-172-31-42-62 ec2-user]# lsblk
		NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
		xvda    202:0    0   8G  0 disk
		└─xvda1 202:1    0   8G  0 part /
		xvdf    202:80   0  10G  0 disk

		2. check if there is data with the command file -s /dev/xvdf 
		
		[root@ip-172-31-42-62 ec2-user]# file -s /dev/xvdf
		/dev/xvdf: data
		
		3. create a file system with the command mkfs -t ext4 /dev/xvdf
		
		[root@ip-172-31-42-62 ec2-user]# mkfs -t ext4 /dev/xvdf
		mke2fs 1.42.12 (29-Aug-2014)
		Creating filesystem with 2621440 4k blocks and 655360 inodes
		Filesystem UUID: 65dd4c3d-5ff4-4760-98f4-3e9d10c2488d
		Superblock backups stored on blocks:
			32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

		Allocating group tables: done
		Writing inode tables: done
		Creating journal (32768 blocks): done
		Writing superblocks and filesystem accounting information: done

		4. create a directory and mount the file system.
		
		[root@ip-172-31-42-62 ec2-user]# mkdir fileserver
		[root@ip-172-31-42-62 ec2-user]# mount /dev/xvdf /fileserver
		
		5. access the directory and create a couple of files
		
		[root@ip-172-31-42-62 fileserver]# nano helloworld.txt
		[root@ip-172-31-42-62 fileserver]# nano idex.html
		[root@ip-172-31-42-62 fileserver]# ls
		helloworld.txt  index.html
		
		6. unmount the volume
		
		[root@ip-172-31-42-62 ec2-user]# umount /dev/xvdf

		7. Detach the volume from the management console
		
		---------------------------------------------------------------------------------------------------------------------------------
		
		create a snapshot
		create a volume
		attach the volume
		
		file -s /dev/xvda
		
		[root@ip-172-31-42-62 ec2-user]# file -s /dev/xvda
		/dev/xvda: GPT partition table, version 1.0, GUID: 655bc113-2fdc-489a-a4a7-3a0dc063e066, disk size: 16777216 sectors of 512 bytes

		file -s /dev/xvdf 
		
		[root@ip-172-31-42-62 ec2-user]# file -s /dev/xvdf
		/dev/xvdf: Linux rev 1.0 ext4 filesystem data, UUID=65dd4c3d-5ff4-4760-98f4-3e9d10c2488d (needs journal recovery) (extents) (large files) (huge files)

		cd /fileserver
		cd ..
		
		mount /dev/xvdf fileserver
		ls
		
		[root@ip-172-31-42-62 ec2-user]# cd fileserver/
		[root@ip-172-31-42-62 fileserver]# ls
		helloworld.txt  index.html
		
		[root@ip-172-31-42-62 ec2-user]# umount /dev/xvdf
		[root@ip-172-31-42-62 ec2-user]# lsblk
		NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
		xvda    202:0    0   8G  0 disk
		└─xvda1 202:1    0   8G  0 part /
		xvdf    202:80   0  10G  0 disk
		
		

		---------------------------------------------------------------------------------------------------------------------------------
		
Volumes vs Snapshots Security

	Snapshots of encrypted volumes are encrypted automatically.
	Volumes restored from encrypted snapshots are encrypted automatically.
	You can share snapshots but only if they are unencrypted.
		These snapshots can be shared with other AWS accounts or made public.

Snapshots of Root Device Volumes

	To create a snapshot for Amazon EBS volumes that serve as root devices you should stop the instance before taking
	the snapshot.
	
RAID, Volumes & Snapshots

	RAID: Redundant Array of Independent Disks
	
		RAID 0 - Striped, no redundancy, good performance.
		
		RAID 1 - Mirrored, Redundancy
		
		RAID 5 - Good for reads, bad for writes, AWS does not recommend ever putting RAID 5 on EBS.
		
		RAID 10 - Striped & Mirrored, Good performance, Good redundancy
		
		To increase disk IOPS
		
		1. Add a RDP protocol as an inbound rule for a security group.
		2. Launch a new instance, choose free Windows AMI.
		3. Add 4 EBS Volumes
		4. Download new key pair
		5. When the instance is ready go to the actions menu and select get Windows Password.
		6. Paste the .pem file and click on decrypt.
		
		User name	Administrator
		Password	%so=nQ42VX
		
		7. Open mstsc (Remote Desktop Connection) and create a new connection.
		8. When the connection is ready go to Disk Management and delete the 4 volumes.
		9. Right click on an unallocated volume and create a Striped volume (RAID 0).
		
	
	How can I take a snapshot of a RAID array?
		
		Problem: Take a snapshot, the snapshot excludes data held in the cache by applications and the OS. This tends not
		to matter on a single volume, however using multiple volumes in a RAID array, this can be a problem due to
		interdependencies of the array.
		
		Solution: Take an application consistent snapshot.
		
			Stop the application from writing to disk.
			Flush all caches to the disk.
			
			How can we do this?
			
				Freeze the file system
				Unmount the RAID Array
				Shutting down the associated EC2 instance
	
Create an AMI (Amazon Machine Image)

	An Amazon AMI provides the information required to launch a virtual server in the cloud. You specify an AMI when
	you launch an instance, and you can launch as many instances from the AMI as you need. You can also launch
	instances from as many different AMIs as you need.
	
		A template for the root volume for the instance.
		Launch permissions that control which AWS accounts can use the AMI to launch instances.
		A block device mapping that specifies the volumes to attach to the instance when it's launched.
		
		
		1. Create a snapshot.
		2. Create an image from the snapshot.
		3. Modify image permissions to public.
		
		Public AMI Publishing: Hardening and Clean-up Requirements
		https://aws.amazon.com/articles/9001172542712674
		
		Guidelines for Shared Linux AMIs
		http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/building-shared-amis.html

		Exam tips
		
			AMI's are regional. You can only launch an AMI from the region in which it is stored. However you can copy AMI's to
			other regions using the console, command line or the Amazon EC2 API.
			

AMI's - EBS root volumes vs Instance Store

	You can select your AMI based on:
	
		Region
		Operating System
		Architecture (32 bit or 64 bit)
		Launch permissions
		Storage for the Root Device (Root Device Volume)
			Instance Store(Ephemeral Storage)
			EBS Backed Volumes
			
			
	With an EBS instance you can stop it but you cannot do that with an Instance Store
	
	
	All AMIs are categorized as either backed by Amazon EBS or backed by instance store.
	
	For EBS volumes: The root device for an instance launched from the AMI is an Amazon EBS volume created from an Amazon EBS snapshot.
	
	For instance store volumes: The root device for an instance launched from the AMI is an instance store volume created from a template
	stored in Amazon S3.
	
	Exam Tips
		
		Instance Store volumes are sometimes called Ephemeral Storage.
		
		Instance store volumes cannot be stopped. If the underlaying host fails, you will lose your data.
		
		EBS backed instances can be stopped. You will not lose the data on this instance if it is stopped.
		
		You can reboot both, you will not lose your data.
		
		By default, both ROOT volumes will be deleted on termination, however with EBS volumes, you can tell AWS to keep the root
		device volume.
		