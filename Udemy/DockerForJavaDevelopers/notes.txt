Docker for Java Developers

/* run an image in the background with port mapping */
	
	docker run -p 27017:27017 -d mongo

	* -d runs in the background

/* view container logs */

	docker logs -f containerId

/* SpringBoot Mongo DB project */

	url: localhost:8080/product/list
	connect to container: docker exec -it 1bfd0b48c0fe bash

	run the app: mvn spring-boot:run
	
/* Images */

	Image ids are a SHA 256 has derived from the layers.

	Tag Names

		Format: [REGISTRYHOST/][USERNAME/]NAME[:TAG]

		Example: registry.hub.docker.com/mongo:latest

	docker images

		The image id f03be0dc25f8 is the first 12 characters of the hash

	docker images -q --no-trunc

		List the full value of the hash

		sha256:f03be0dc25f8732caef29f051c91ce7447f8305738032e91c23b13cba3e74e40


	docker image inspect mongo

		The mongo image has the following layers. Every layer is a file.

		"RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:030309cad0ba82b098939419dcb5e0a95c77d2427d99c44a690ecab59f80a487",
                "sha256:1e77dd81f9fa12f3034fa1ed55bc2d1f7a316b450ae53f36beb52af2dd83b78f",
                "sha256:6f15325cc380f8fc8fa0cdffc5cc7e38c5beb155e09ab3e0edbb1e5a842c46cc",
                "sha256:5724f34c44b8f3121e55902ff4664ac351b04c3575217aaaa7c9fd5b130ffe38",
                "sha256:44cf575eef6a7eda4b2f668b7e671d7ac34232b1b0fbeccc41d816e5207a657e",
                "sha256:6e986e3f895269ebfef6ff7434c3d06f5d3a28b0a1e01ebf47b9450dec99e7bc",
                "sha256:52370c71518869b6e554b06b99a5c44767ecffc0b71623cb6960827e94a64e45",
                "sha256:0bd5442a3a3ab0bc859289269de66db757c90bba5a886c4cce4bb73c646ca625",
                "sha256:dcfb9fa1925e709903d50575ae4ee72e2e9896206ec3acc33baab283c0238191",
                "sha256:d7329912c923cb0119e13c07f600bcb87a6ec2a8e90a24cea66484aff0aedcdb",
                "sha256:567278c58c0078c8c6d0ac5948a86bdb791a99c8d3e58e5c190d870ada7cf402",
                "sha256:81924e984258a15d12282f8684463da9392c6f06ea07b17727de7e601e808a15"
            ]
        },
	

/* mongo local volume for db persistence */
	
	docker run -p 27017:27017 -v /Users/oscar.santamaria/dockerdata/mongo:/data/db -d mongo

/* run rabbitmq with port mapping exposing also the management console */ 

	user: guest
	password: guest
	docker run -d --hostname local --name local-rabbit -p 8080:15672 -p 5671:5671 -p 5672:5672 rabbitmq:3-management

	connect to console: http://localhost:8080/

	docker run -d --hostname my-rabbit --name rabbitmq -p 5671:5671 -p 5672:5672 rabbitmq

/* run mysql with port mapping, environment variables and local storage */
	
	stop local mysql 
		
		sudo systemctl stop mysql
	
	docker run --name local-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v /Users/oscar.santamaria/dockerdata/mysql:/var/lib/mysql -p 3306:3306 -d mysql

	connect to container

		docker exec -it d29977fb5f69 bash

	connect to mysql

		mysql

	docker run --name mysqldb -p 8082:3306 -e MYSQL_DATABASE=pageviewservice -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -d mysql:5

/* Docker cleaning */

	Kill all running containers

		docker kill $(docker ps -q)

	Delete all stop containers

		docker rm $(docker ps -a -q)

	Remove a docker image

		docker rmi <image name>	

	Delete untagged (dangling images)

		docker rmi $(docker images -q -f dangling=true)
	
	Delete all images

		docker rmi $(dockers images -q)

	Remove all dangling volumes

		docker volume rm $(docker volume ls -f dangling=true -q)

/* Run Centos image on docker */
	
	docker run -d centos
	
	docker run -d centos tail -f /dev/null
	
	docker exec -it 557cc951b694 bash
	
	in the terminal:
	
		yum install java
		
/* Run Spring Boot app in docker */

	1. mvn package to generate spring-boot-web-0.0.1-SNAPSHOT.jar
	
	2. Create docker file.

		FROM centos

		RUN yum install -y java

		VOLUME /tmp
		ADD /spring-boot-web-0.0.1-SNAPSHOT.jar myapp.jar
		RUN sh -c 'touch /myapp.jar'
		ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/myapp.jar"]

	3. Create a folder and copy the docker file and the jar file.

	3. Go to that folder and run docker build -t spring-boot-docker .

	4. When the build is complete then run docker run -d -p 8080:8080 spring-boot-docker
	
	
/* Automatig Building of Docker images (Fabric8) */

	- download the app and test by running on http://localhost:8080/

	- configure the maven plugin  (Check Daemon socket option info https://docs.docker.com/engine/reference/commandline/dockerd/)

	- in the settings.xml file add DockerHub credentials.

		<?xml version="1.0" encoding="UTF-8"?>
		<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          			xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
    		<servers>
        		<server>
            		<id>docker.io</id>
            		<username>osantamaria</username>
            		<password>canela01</password>
        		</server>
    		</servers>
		</settings>

	- mvn clean package
	
	- mvn clean package docker:build (build docker image)
	
	- mvn clean package docker:build docker:push (publish to docker hub)

	For a better automation:

	- Change the dockerfile to a DockerFileTemplate.
	- Create a groovy script
	- Update pom with gmavenplus-plugin
	
/* Running images from Maven */

	mvn docker:run 		runs interactively
	mvn docker:start	runs in the background
	mvn docker:stop		

	Example

		* check /Users/oscar.santamaria/git/personal/DockerForJavaDevelopers/spring-boot-docker/src/main/scripts/dockercommands.txt 

		- Build image for spring-boot-docker app
		- Build image for page-view-service app

		- Need to run have mysql and rabbitmq containers up and running

			docker run --name local-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v /Users/oscar.santamaria/dockerdata/mysql:/var/lib/mysql -p 3306:3306 -d mysql
			docker run -d --hostname local --name local-rabbitmq -p 5671:5671 -p 5672:5672 rabbitmq

		- Run

			docker run --name pageviewservice -p 8081:8081 \
			--link local-rabbitmq:local-rabbitmq \
			--link local-mysql:local-mysql \
			-e SPRING_DATASOURCE_URL=jdbc:mysql://local-mysql:3306/pageviewservice \
			-e SPRING_PROFILES_ACTIVE=mysql  \
			-e SPRING_RABBITMQ_HOST=local-rabbitmq \
			-d osantamaria/pageviewservice

		Course Example:

			docker run --name mysqldb -p 3306:3306 -e MYSQL_DATABASE=pageviewservice -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -d mysql
			docker run --name rabbitmq -p 5671:5671 -p 5672:5672 rabbitmq

			docker run --name pageviewservice -p 8081:8081 \
			--link rabbitmq:rabbitmq \
			--link mysqldb:mysqldb \
			-e SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/pageviewservice \
			-e SPRING_PROFILES_ACTIVE=mysql  \
			-e SPRING_RABBITMQ_HOST=rabbitmq \
			osantamaria/pageviewservice

/* Docker compose */

	Wordpress example:

		Go to the docker compose file location:

			/Users/oscar.santamaria/git/personal/DockerForJavaDevelopers/spring-boot-docker/src/main/scripts/wordpress

		Execute the command to start:

			docker-compose up -d

		Execute this command to stop

			docker-compose down


	Spring Boot Docker app example

		/Users/oscar.santamaria/git/personal/DockerForJavaDevelopers/spring-boot-docker/src/main/scripts/sfgapp

		docker-compose up -d

		docker-compose down


/* Docker Swarm Mode */

	- Login to Digital Ocean and create an SSH key in /Users/oscar.santamaria/.ssh/digitalocean/
	- Create 4 droplets using CentOS 7.
	- Navigate to /Users/oscar.santamaria/.ssh/digitalocean/
	- Install docker on each node: ssh -i id_rsa.pub root@dropletip

		- https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-centos-7

			sudo yum check-update
    		curl -fsSL https://get.docker.com/ | sh
			sudo systemctl start docker
    		sudo systemctl status docker
    		sudo systemctl enable docker

		ssh -i id_rsa root@147.182.221.91		--->	manager
		ssh -i id_rsa root@147.182.221.164		--->	worker
		ssh -i id_rsa root@137.184.56.126		--->	manager
		ssh -i id_rsa root@147.182.135.1		--->	worker
		

	- connect to node1 and enable Docker Swarm using the public ip

		docker swarm init --advertise-addr 147.182.221.91

			Swarm initialized: current node (qsne222jiys9fsi12yirib0dz) is now a manager.

			To add a worker to this swarm, run the following command:

    			docker swarm join --token SWMTKN-1-4ssqhl00iiso2q9ccjp7cwih8pduhoyrvq67fi4j7zg6be49vr-7anezn3gm9xg05l0zhw9elyft 147.182.221.91:2377

			To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

	
	- connect to node2, node3 and node4 and execute
		
		docker swarm join --token SWMTKN-1-4ssqhl00iiso2q9ccjp7cwih8pduhoyrvq67fi4j7zg6be49vr-7anezn3gm9xg05l0zhw9elyft 147.182.221.91:2377

	- On node 1 execute

		docker node ls

		docker swarm join-token manager

			docker swarm join --token SWMTKN-1-4ssqhl00iiso2q9ccjp7cwih8pduhoyrvq67fi4j7zg6be49vr-bzsrkhdp30epmtb8t34i4um4b 147.182.221.91:2377

		docker swarm join-token worker

			docker swarm join --token SWMTKN-1-4ssqhl00iiso2q9ccjp7cwih8pduhoyrvq67fi4j7zg6be49vr-7anezn3gm9xg05l0zhw9elyft 147.182.221.91:2377

	- On node 3 execute

		docker swarm join --token SWMTKN-1-4ssqhl00iiso2q9ccjp7cwih8pduhoyrvq67fi4j7zg6be49vr-bzsrkhdp30epmtb8t34i4um4b 147.182.221.91:2377

	- On node 4 execute

		docker swarm join --token SWMTKN-1-4ssqhl00iiso2q9ccjp7cwih8pduhoyrvq67fi4j7zg6be49vr-7anezn3gm9xg05l0zhw9elyft 147.182.221.91:2377

	- At this point, from any manager node 

		[root@centos-node1 ~]# docker node ls
		ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
		qsne222jiys9fsi12yirib0dz *   centos-node1   Ready     Active         Leader           20.10.9
		5coyj4b4jpuqy42dttw9rts0u     centos-node2   Ready     Active                          20.10.9
		q7x4kchnetrj64lnzw378jygy     centos-node3   Ready     Active         Reachable        20.10.9
		lc1ucfgnuc1zvk430a3n7ka9v     centos-node4   Ready     Active                          20.10.9

		

	