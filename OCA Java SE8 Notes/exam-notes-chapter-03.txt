Methods and encapsulation

3.1 Scope of variables
		
	- Local variables (also known as method-local variables)
	- Method parameters (also known as method arguments)
	- Instance variables (also known as attributes, fields, and nonstatic variables)
	- Class variables (also known as static variables)
	
	As a rule of a thumb, the scope of a variable ends when the brackets of the block of code it’s defined in get closed.
	
	3.1.1 Local variables
	
		Local variables are defined within a method. They may or may not be defined within code constructs such as if-else constructs, 
		looping constructs, or switch statements. They have the shortest scope (life span).
		
	3.1.2 Method parameters
	
		The variables that accept values in a method signature are called method parameters. They’re accessible only in the method that defines them.
		The scope of a method parameter may be as long as that of a local variable or longer, but it can never be shorter.
		
	3.1.3 Instance variables
	
		Instance variable is available for the life of an object.
		It’s accessible to all the instance (or nonstatic) methods defined in a class.
		The scope of an instance variable is longer than that of a local variable or a method parameter.
		
	3.1.4 Class variables
	
		Have the largest scope of all types of variables.
		A class variable belongs to a class, not to individual objects of the class
		A class variable is shared across all objects—objects don’t have a separate copy of the class variables.
		You don’t even need an object to access a class variable. It can be accessed by using the name of the class in which it’s defined
		
	3.1.5 Overlapping variable scopes
	
		In particular, you can’t define a static variable and an instance variable with the same name in a class
		
			class MyPhone {
				static boolean softKeyboard = true;
				boolean softKeyboard = true;
			}
		
		Local variables and method parameters can’t be defined with the same name.
		
			void myMethod(int weight) {
				int weight = 10;
			}
			
		A class can define local variables with the same name as the instance or class variables, also referred to as shadowing.
		
			class MyPhone {
				static boolean softKeyboard = true;
				String phoneNumber;
				void myMethod() {
					boolean softKeyboard = true;
					String phoneNumber;
				}
			}
		
		
3.2 Object’s life cycle

	- The task of reclaiming unused memory is taken care of by Java’s garbage collector, which is a low-priority thread. 
	  It runs periodically and frees up space occupied by unused objects.
	
	- Java also provides a method called finalize, which executes just before an object is garbage collected.
	
		In theory, you can use this method to free up resources being used by an object, although doing so isn’t recommended
		because its execution isn’t guaranteed to happen.
		
	- An object’s life cycle starts when it’s created and lasts until it goes out of scope or is no longer referenced by a variable.
	
	3.2.1 An object is born
	
		An object comes into the picture when you use the keyword operator new. You can initialize a reference variable with this object.
		
		Initializing a reference variable and an instance is not same. Initializing a reference variable might not always result in 
		the creation of a new instance.
		
		What happens when you create a new object without assigning it to any reference variable?
		
			class ObjectLifeCycle2 {
				Person person = new Person();
				ObjectLifeCycle2() {
					new Person();
				}
			}
			
			In the preceding example, an object of the class Person is created, but it can’t be accessed using any reference variable. 
			Creating an object in this manner will execute the relevant constructors of the class.
			
	3.2.2 Object is accessible

		- Once an object is created, it can be accessed using its reference variable. 
		- It remains accessible until it goes out of scope or its reference variable is explicitly set to null.
		- Also, if you reassign another object to an initialized reference variable, the previous object becomes inaccessible from that variable.
		- You can access and use an object within other classes and methods.
	
	3.2.3 Object is inaccessible
	
		An object can become inaccessible if it goes out of scope or is dereferenced by reassignment.
		
		- Variable goes out of scope
		
		- Dereferencing by reassignment: A variable that already refers to an instance can be assigned another instance. In this
			case, the earlier instance is dereferenced and becomes eligible for garbage collection.
			
	3.2.4 Garbage collection
	
		When is an object garbage collected?
			
			You can determine only which objects are eligible to be garbage collected. 
			You can never determine when a particular object will be garbage collected.
			
		Using system.gc() or runtime.getruntime().gc()
			
			As a programmer, you can’t start execution of Java’s garbage collector. You can only request it to be started by
			calling System.gc() or Runtime.getRuntime().gc().
			
			Calling this method doesn’t guarantee when the garbage collector would start (the call can even be ignored by the JVM).
			
		Garbage collecting referenced objects
		
			A group of instances with no external references forms an island of isolation, which is eligible for garbage collection.
			
			class Exam {
				
				private String name;
				
				private Exam other;
				
				public Exam(String name) {
					this.name = name;
				}
				
				public void setExam(Exam exam) {
					other = exam;
				}
			}
			
			class IslandOfIsolation {
				public static void main(String args[]) {
					Exam php = new Exam("PHP");
					Exam java = new Exam("Java");
					php.setExam(java);
					java.setExam(php);
					php = null;
					java = null;
				}
			}
			
3.3 Create methods with arguments and return values

	- A method is a group of statements identified with a name. Methods are used to define the behavior of an object.
	
	3.3.1 Return type of a method: states the type of value that a method will return
	
	3.3.2 Method parameters: You can pass multiple values to a method as input. Theoretically, no limit exists on the number of method parameters that can be defined by a method, but practically
		it’s not a good idea to define more than three method parameters. 
		
		Method parameters are the variables that appear in the definition of a method. Method arguments are the actual values that are passed to a method while executing it.
		
		You can define a parameter that can accept variable arguments (varargs) in your methods.
		
			class Employee {
				public int daysOffWork(int... days) {
					int daysOff = 0;
					for (int i = 0; i < days.length; i++)
						daysOff += days[i];
					return daysOff;
				}
			}
		
			* The ellipsis (...) that follows the data type indicates that the method parameter days may be passed an array or multiple comma-separated values.
			
			* You can define only one variable argument in a parameter list, and it must be the last variable in the parameter list.
	
			* If your method defines multiple method parameters, the variable that accepts variable arguments must be the last one in the parameter list
			
		Rules to remember

			- You can define multiple parameters for a method.
			- The method parameter can be a primitive type or object.
			- The method’s parameters are separated by commas.
			- Each method parameter is preceded by the name of its type. 
			- Each method parameter must have an explicit type declared with its name. 
			- You can’t declare the type once and then list the parameters separated by commas, as you can for variables.
	
	3.3.3 Return statement		
	
		- A return statement is used to exit from a method, with or without a value.
		
		- For methods that define a return type, the return statement must be immediately followed by a return value.
		
		- For methods that don’t return a value, the return statement can be used without a return value to exit a method.
		
		- You can use the return statement in a method even if it doesn’t return a value.
		
			void setWeight(double val) {
				if (val < -1) return; // control exits the method if the condition is true.
				weight = val;
			}
			
		- The return statement must be the last statement to execute in a method, if present.
		
		- The return statement need not be the last statement in a method, but it must be the last statement to execute in a method.
		
			void setWeight(double val) {
				if (val < 0)
					return; // not the last statement in the method but if the condition is true, it is the last statement to execute.
				else
					weight = val;
			}
			
		Rules to remember when defining a return statement
	
			- For a method that returns a value, the return statement must be followed immediately by a value.
			- For a method that doesn’t return a value (return type is void), the return statement must not be followed by a return value.
			- If the compiler determines that a return statement isn’t the last statement to execute in a method, the method will fail to compile.
	
	3.4 Create an overloaded method
	
		Overloaded methods are methods with the same name but different method parameter lists.
		
		- Overloaded methods must have method parameters different from one another.
		- Overloaded methods may or may not define a different return type.
		- Overloaded methods may or may not define different access levels.
		- Overloaded methods can’t be defined by only changing their return type or access modifiers or both.
		
		3.4.1 Argument list
		
			- Change in the number of parameters that are accepted
			- Change in the types of parameters that are accepted
			- Change in the positions of the parameters that are accepted (based on parameter type, not variable names)
			
			Won't compile
			
				double calcAverage(int[] marks) {
					//return a double value
				}
			
				double calcAverage(int... marks) {
					//return a double value
				}
			
			
			Change int the positions example
				
				double calcAverage(double marks1, int marks2) {
					return (marks1 + marks2)/2.0;
				}
				double calcAverage(int marks1, double marks2) {
					return (marks1 + marks2)/2.0;
				}
				
				Issue: (Code fails to compile)
				
					class MyClass {
						
						double calcAverage(double marks1, int marks2) {
							return (marks1 + marks2)/2.0;
						}
						
						double calcAverage(int marks1, double marks2) {
							return (marks1 + marks2)/2.0;
						}
						
						public static void main(String args[]) {
							MyClass myClass = new MyClass();
							myClass.calcAverage(2, 3); // Compiler can’t determine which overloaded method calcAverage should be called
						}
					}
					
		3.4.2 Return type
		
			Methods can’t be defined as overloaded methods if they differ only in their return types, because return type is not part of a method signature
			
		3.4.3 Access level
		
			Methods can’t be defined as overloaded methods if they differ only in their access levels.
			
			Won't compile
				
				public double calcAverage(int marks1, int marks2) {
					return (marks1 + marks2)/2.0;
				}
				private double calcAverage(int marks1, int marks2) {
					return (marks1 + marks2)/2.0;
				}

	3.5 Constructors of a class		
	
		- Constructors are special methods that create and return an object of the class in which they’re defined.
		- Constructors have the same name as the class in which they’re defined, and they don’t specify a return type—not even void
		
		A constructor can accomplish the following tasks:
			
			- Call the superclass’s constructor; this can be an implicit or explicit call.
			- Initialize all the instance variables of a class with their default values.
		
		3.5.1 User-defined constructors
	
			- If the author defines a constructor in a class, it’s known as a user-defined constructor.
			- A constructor does have an implicit return type, which is the class in which it’s defined.
			- You can define constructors using any of the four access levels.
			- What happens if you define a return type for a constructor? Java will treat it as another method, not a constructor.
			
			Initializer blocks versus constructors
				
				- An initializer block is defined within a class, not as a part of a method. It executes for every object that’s created for a class.
				- If you define both an initializer and a constructor for a class, both of these will execute. The initializer block will execute prior to the constructor
				- If a class defines multiple initializer blocks, their order of execution depends on their placement in a class. But all of them execute before the class’s constructor
				- Initializer blocks are used to initialize the variables of anonymous classes. An anonymous class is a type of inner class. In the absence of a name, anonymous classes can’t
					define a constructor and rely on an initializer block to initialize their variables upon the creation of an object of their class.
			
				A lot of action can happen within an initializer block: 
				
					- It can create local variables. 
					- It can access and assign values to instance and static variables. 
					- It can call methods and define loops, conditional statements, and try-catch-finally blocks. 
					- Unlike constructors, an initializer block can’t accept method parameters.
		
		3.5.2 Default constructor
		
			In the absence of a user-defined constructor, Java inserts a default constructor.
			It calls the constructor of the super (parent) class and assigns default values to all the instance variables.
			
		3.5.3 Overloaded constructors
		
			- Overloaded constructors must be defined using different argument lists.
			- Overloaded constructors can’t be defined by just a change in the access levels.
			
			Invoking an overloaded constructor from another constructor
			
				- Overloaded constructors are invoked by using the keyword this.
				- You can’t invoke a constructor within a class by using the class’s name.
				- When you invoke an overloaded constructor using the keyword this, it must be the first statement in your constructor.
				- You can’t call two (or more) constructors within a constructor because the call to a constructor must be the first statement in a constructor.
				- You can’t call a constructor from any other method in your class.
				- Overloaded constructors can’t be defined by just a change in the access levels.
				- Overloaded constructors may be defined using different access levels.
				
	3.6 Accessing object fields
		
		3.6.1 What is an object field?
			
			An object field is another name for an instance variable defined in a class.
				
		3.6.2 Read and write object fields
			
			- Access modifier of the object field
			- Access modifiers of methods used to read and write the value of the object field
			- Constructors that assign values to object fields
				
		3.6.3 Calling methods on objects
			
			- Java uses the dot notation (.) to execute a method on a reference variable.
				
			- When you call a method, you must pass to it the exact number of method parameters that are defined by it.
				
			- If the parameter list of the called method defines a variable argument at the rightmost position, 
				you can call the method with a variable number of arguments.
				
				public int daysOffWork(int... days) {
					int daysOff = 0;
					for (int i = 0; i < days.length; i++)
						daysOff += days[i];
					return daysOff;
				}
					
				You can call this method using a variable list of arguments:
					
				Class Test {
					public static void main(String args[]) {
						Employee e = new Employee();
						System.out.println(e.daysOffWork(1, 2, 3, 4));
						System.out.println(e.daysOffWork(1, 2, 3));
					}
				}
					
			- You can’t assign a return value of a method to an incompatible variable
					
		3.7 Apply encapsulation principles to a class
			
			- A well-encapsulated object doesn’t expose its internal parts to the outside world. It defines a set of methods 
				that enables the users of the class to interact with it.
					
			3.7.1 Need for encapsulation
				
				The private members of a class—its variables and methods—are used to hide information about a class.
					
				Here’s a quick list of reasons to encapsulate the state of a Java object:
					
					- To prevent an external object from performing dangerous operations
					- To hide implementation details, so that the implementation can change a second time without impacting other objects
					- To minimize the chance of coupling
						
			3.7.2 Apply encapsulation
				
				Encapsulation is the concept of defining variables and the methods together in a class.
					
				Well-encapsulated classes don’t expose their instance variables outside their class.
			
		3.8 Passing objects and primitives to methods
			
			3.8.1 Passing primitives to methods
				
				The value of a primitive data type is copied and passed to a method. Hence, the variable whose value was copied doesn’t change.
					
			3.8.2 Passing object references to methods		
						
				When methods reassign the object references passed to them
					
					- When you pass an object reference to a method, the method can assign it to another variable. In this case, 
						the state of the object, which was passed on to the method remains intact.
						
					- When a method is passed a reference value, a copy of the reference (that is, the memory address) is passed 
						to the invoked method. The callee can do whatever it wants with its copy without ever altering 
						the original reference held by the caller.
					
				When methods modify the state of the object references passed to them	
				
					- When you pass an object reference variable to a method, a change in its value may be reflected in the calling method
						(if the called method modifies an object field of the object passed to it.)
					
					- If the called method assigns a new object reference to the method argument before modifying the
						value of its fields, these changes aren’t visible in the calling method. 					
						