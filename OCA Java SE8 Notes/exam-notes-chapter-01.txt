Java Basics

1.1 The structures of a Java class and a source code file

	Structure of a Java class
	
		Package statement
		Import statement
		Comments
		Class declaration {
			Variables
			Comments
			Constructors
			Methods
			Nested classes
			Nested interfaces
			Enum
		}

		Class declaration: The declaration of a class consist of the following parts:
		
			- Access Modifiers
			- Nonaccess Modifiers
			- Class name (mandatory)
			- Name of the base class (mandatory), if the class is extending another class
			- All implemented interfaces, if the class is implementing any interfaces
			- Class body (class fields, methods, constructors), included within a pair of curly braces, {} (mandatory)
			
	Structure and components of a Java source code file
	
		- A Java source code file is used to define Java entities such as a class, interface, enum, and annotation.
		
		- When you define a public class or an interface in a Java source file, the names of the class or interface 
			and Java source file must match. 
		
		- Also, a source code file can’t define more than one public class or interface.
		
1.2 Executable Java applications

	An executable Java class, when handed over to the JVM, starts its execution at a particular point in the class,
	the main method. 
	
	The JVM starts executing the code that’s defined in the main method.
	
	You can’t hand over a non-executable Java class (class without a main method) to the JVM and ask it to execute it. 
	In this case, the JVM won’t know which method to execute because no entry point is marked.
	
	The main method
	
		- The method must be marked as a public method.
		- The method must be marked as a static method.
		- The name of the method must be main.
		- The return type of this method must be void.
		- The method must accept a method argument of a String array or a variable argument (varargs) of type String.
		- If a class defines a main method that doesn’t match the signature of the main method, it’s referred to 
			as an overloaded method
		
		Valid signatures:
		
			public static void main(String args[]) {}
		
			public static void main(String[] args) {}
		
			public static void main(String... args) {}
		
			static public void main(String[] args) {}
		
1.3 Java packages
		
	Package-naming convention example:
	
		com.oracle.javacert.associate
		
			com			Commercial. A couple of the commonly used three-letter package abbreviations are 
						gov for government bodies and edu for educational institutions
			oracle		Name of the organization
			javacert	Further categorization of the project at Oracle
			associate	Further subcategorization of Java certification
			
	Here are a few of important rules about packages:
	
		- Per Java naming conventions, package names should all be in lowercase.
		- The package and subpackage names are separated using a dot (.).
		- Package names follow the rules defined for valid identifiers in Java.
		- For classes and interfaces defined in a package, the package statement is the first statement in a Java 
			source file (a .java file). The exception is that comments can appear before or after a package statement.
		- There can be a maximum of one package statement per Java source code file (.java file).
		- All the classes and interfaces defined in a Java source code file are defined in the same package. 
			They can’t be defined in separate packages.	
		
	You can’t import classes from a subpackage by using an asterisk in the import statement.		
	
	What happens if you don’t include a package statement in your classes or interfaces?

		In that case, they become part of a default, no-name package.

	Static imports
	
		package certification;
		public class ExamQuestion {
			static public int marks;
			public static void print() {
				System.out.println(100);
			}
		}
		
		package university;
		import static certification.ExamQuestion.marks; // Correct statement is import static, not static import
		class AnnualExam {
			AnnualExam() {
				marks = 20; // Access variable marks without prefixing it with its class name
			}
		}
		
		package university;
		import static certification.ExamQuestion.*; // Imports all static members of class ExamQuestion
		class AnnualExam {
			AnnualExam() {
				marks = 20;
				print();
			}
		}
		
1.4 Java access modifiers

	Java has four access levels:
	
		- public (least restrictive)
			
			This is the least restrictive access modifier. Classes and interfaces defined using the public
			access modifier are accessible across all packages, from derived to unrelated classes.

		- protected
		
			The members of a class defined using the protected access modifier are accessible to
			 
			 - Classes and interfaces defined in the same package
			 - All derived classes, even if they’re defined in separate packages
			 - A derived class inherits the protected members of its base class, irrespective of the packages in which
			 	they’re defined
		
		- default
		
			The members with package access are only accessible to classes and interfaces defined in the same package.
			
		- private (most restrictive)
		
			The members of a class defined using the private access modifier are accessible only to themselves.
			For your real projects, it is possible to access private members of a class outside them, using Java reflection.
		
		Entity name 							public 		protected 		private
		--------------------------------------------------------------------------------
		Top-level class, interface, enum 		✓ 			✗ 				✗
		Class variables and methods 			✓ 			✓ 				✓
		Instance variables and methods 			✓ 			✓ 				✓
		Method parameter and local variables 	✗ 			✗ 				✗
		

1.5 Nonaccess modifiers

	Access modifiers control the accessibility of your class and its members outside the class and the package. 
	Nonaccess modifiers change the default behavior of a Java class and its members.
	
	- abstract
	
		When added to the definition of a class, interface, or method, the abstract modifier changes its default behavior.
		
		Abstract class
			
			An abstract class can’t be instantiated.
			
		Abstract interface
		
			An interface is an abstract entity by default.
			
		Abstract method
			
			An abstract method doesn’t have a body. Usually, an abstract method is implemented by a derived class.
			
	- static
	
		The nonaccess modifier static can be applied to the declarations of variables, methods, classes, and interfaces.
		
		static variables 
		
			- belong to a class.
			- They’re common to all instances of a class and aren’t unique to any instance of a class
			- static attributes exist independently of any instances of a class and may be accessed even 
				when no instances of the class have been created.
			- You can compare a static variable with a shared variable. 
			- A static variable is shared by all the objects of a class. 
			- A class and an interface can declare static variables
			
		static methods
		
			- static methods aren’t associated with objects and can’t use any of the instance variables of a class. 
			- You can define static methods to access or manipulate static variables
			- The nonprivate static variables and methods are inherited by derived classes
			- The static members aren’t involved in runtime polymorphism.
			- You can’t override the static members in a derived class, but you can redefine them
			- Neither static methods nor static variables can access the non-static variables and methods of a class.
			- Non-static variables and methods can access static variables and methods because the static members of 
				a class exist even if no instances of the class exist.
			- Because static variables and methods belong to a class and not to an instance, you can access them using 
				variables, which are initialized to null	

				class Emp {
					String name;
					static int bankVault;
					static int getBankVaultValue() {
						return bankVault;
					}
				}
				
				class Office {
					public static void main(String[] args) {
						Emp emp = null;
						System.out.println(emp.bankVault);
						System.out.println(emp.getBankVaultValue());
					}
				}
		
	- final
	
		The keyword final can be used with the declaration of a class, variable, or method. 
		It can’t be used with the declaration of an interface.
		
		final class
			
			A class that’s marked final can’t be extended by another class.
			
		final variable
				
			A final variable can’t be reassigned a value. It can be assigned a value only once.
			
			It’s easy to confuse reassigning a value to a final variable with calling a method on a final variable, 
			which might change the state of the object that it refers to.
		
			If a reference variable is defined as a final variable, you can’t reassign another object to it, 
			but you can call methods on this variable (that modify its state)
			
			class Person {
				final StringBuilder name = new StringBuilder("Sh");
				Person() {
					name.append("reya"); // Can call methods on a final variable that change its state
					name = new StringBuilder(); // Won’t compile. You can’t reassign another object to a final variable.
				}
			}
			
		final method
		
			A final method defined in a base class can’t be overridden by a derived class.
			
	- synchronized
	
		A synchronized method can’t be accessed by multiple threads concurrently. 
		You can’t mark classes, interfaces, or variables with this modifier.
		
	- native
	
		A native method calls and makes use of libraries and methods implemented in other programming languages 
		such as C or C++. You can’t mark classes, interfaces, or variables with this modifier.

	- strictfp
	
		Classes, interfaces, and methods defined using this keyword ensure that calculations using floating-point 
		numbers are identical on all platforms.This modifier can’t be used with variables.
		
	- transient
	
		A transient variable isn’t serialized when the corresponding object is serialized. The transient modifier 
		can’t be applied to classes, interfaces, or methods.

	- volatile
	
		A volatile variable’s value can be safely modified by different threads. Classes, interfaces, and methods 
		can’t use this modifier.
	
	
1.6 Features and components of Java

	- Platform Independence
	- Object Orientation
	- Abstraction
	- Encapsulation
	- Inheritance
	- Polymorphism
	- Type Safety
	- Automatic Memory Management
	- Multithreading and Concurrency
	- Security
		