Selected classes from the Java API and arrays

	4.1 Welcome to the world of the String class
		
		4.1.1 Creating String objects
		
			- String objects created using the operator new always refer to separate objects, even if they store the same sequence of characters.
			- String objects created using the assignment operator (=) may refer to the same object if they store the same sequence of characters.
			- You can also create a String object by enclosing a value within double quotes ("): 
				
				System.out.println("Morning"); // Creates a new String object with value Morning in the String constant pool
				
			- Because String objects are immutable, the pool of String objects is also called the String constant pool.
			- You can also invoke other overloaded constructors of the class String to create its objects by using the operator new.
			- You can also create objects of String using the classes StringBuilder and StringBuffer.
			
			Counting string objects
			
				- If a String object is created using the keyword new, it always results in the creation of a new String object. 
				- String objects created this way are never pooled. 
				- When a variable is assigned a String literal using the assignment operator, a new String object is created only if a String object with the
					same value isn’t found in the String constant pool.
					
		4.1.2 The class String is immutable
		
			- Once created, the contents of an object of the class String can never be modified.
			- The immutability of String objects helps the JVM reuse String objects, reducing memory overhead and increasing performance.	
			- The JVM creates a pool of String objects that can be referenced by multiple variables across the JVM.
			- The JVM can make this optimization only because String is immutable.
			- String objects can be shared across multiple reference variables without any fear of changes in their values.
			
			Immutability of the class String:
			
				- String uses a char array to store its value
				- String uses final variable to store its value	
				- Methods of string don’t modify the char array
				
		4.1.3 Methods of the class String
		
			charAt()
			indexOf()
			substring()
			trim()
			replace()
			length()
			startsWith() and endsWith()
			
			Method chaining
				
				- Because String objects are immutable, their values won’t change if you execute methods on them. 
				- You can, of course, reassign a value to a reference variable of type String.
				
				
		4.1.4 String objects and operators
		
			- Concatenation: + and +=
			- Equality: == and !=
			
			Behind the scenes, string concatenation is implemented by using the StringBuilder or StringBuffer.
			
			When you use += to concatenate String values, ensure that the variable you’re using has been initialized (and doesn’t contain null)
		
		4.1.5 Determining equality of Strings
		
			Equals method
			
				- The correct way to compare two String values for equality is to use the equals method defined in the String class.
				
			Comparing reference variables to instance values
			
				- The operator == compares the reference variables, that is, whether the variables refer to the same object.
		
				- You can use the operator != to compare the inequality of objects referred to by String variables.
				
			Equality of values returned by string methods
				
				- Watch out for the exam questions that test you on using the == operator with String values returned by methods of the class String. 
					Because these values are created using the new operator, they aren’t placed in the String pool.
				
	4.2 Mutable strings: StringBuilder
		
		- The class StringBuilder is defined in the package java.lang, and it has a mutable sequence of characters.
			
		- You should use the class StringBuilder when you’re dealing with larger strings or modifying the contents of a string often.
			
		4.2.1 The StringBuilder class is mutable
			
		4.2.2 Creating StringBuilder objects
				
			StringBuilder sb1 = new StringBuilder();					// initial 16 characters of capacity
			StringBuilder sb2 = new StringBuilder(sb1);					// receives an StringBuilder object
			StringBuilder sb3 = new StringBuilder(50);					// receives an int to specify initial capacity
			StringBuilder sb4 = new StringBuilder("Shreya Gupta");		// receives a String
				
		4.2.3 Methods of class StringBuilder
			
			charAt()
			indexOf()
			substring()
			length()
			append()
			insert()
			delete()
			deleteCharAt()
			reverse()
			replace() * replace in String accepts characters to be replaced but in StringBuilder accepts a position to be replaced.
			subsequence() * subsequence doesn’t modify the existing value of a StringBuilder object
				
		4.2.4 A quick note on the class StringBuffer
			
			The classes StringBuffer and StringBuilder offer the same functionality, with one difference: 
			The methods of the class StringBuffer are synchronized where necessary, whereas the methods of the class StringBuilder aren’t.
			If you need to access your code from multiple threads, use StringBuffer; otherwise use StringBuilder.
				
	4.3 Arrays	
				
		4.3.1 What is an array?
				
			- An array is an object that stores a collection of values.
				
			- Arrays can store two types of data:
						
				- A collection of primitive data types
				- A collection of objects
				
			- Object arrays store references (to objects) and primitive arrays store primitive values.
				
			- You can define one-dimensional and multidimensional arrays.
				
			- Multidimensional arrays may or may not contain the same number of elements in each row or column
				
			- Creating an array involves three steps, as follows:
					
				- Declaring the array
				- Allocating the array
				- Initializing the array elements
					
		4.3.2 Array declaration
			
			int intArray[];
			String[] strArray;
			int[] multiArray[];
				
			- The number of bracket pairs indicates the depth of array nesting. Java doesn’t impose any theoretical limit on 
					the level of array nesting.
					
			- The array declaration only creates a variable that refers to null.
				
			- Array size can’t be defined with the array declaration.
				
			- An array type can be any of the following:
				
				- Primitive data type
				- Interface
				- Abstract class
				- Concrete class
					
			- Arrays can be of any data type other than null.
				
		4.3.3 Array allocation
				
			- When you allocate memory for an array, you should specify its dimensions, such as the number of elements the array should store.
			- Note that the size of an array can’t expand or reduce once it is allocated.
			- Because an array is an object, it’s allocated using the keyword new, followed by the type
				of value that it stores, and then its size.
			- The size of the array must evaluate to an int value. You can’t create an array with its size specified as a floating-point number. 
			- Java accepts an expression to specify the size of an array, as long as it evaluates to an int value. 
					
			You can also allocate the multidimensional by defining size in only the first square brackets
				
				int[] multiArr[];
				multiArr = new int[2][];
				
			You can’t allocate a multidimensional array as follows:
					
				int[] multiArr[];
				multiArr = new int[];		// Non matching square brackets
				multiArr = new int[][3];	// Size in first square bracket missing
					
					
				Once allocated, the array elements store their default values. 
				For arrays that store objects, all the allocated array elements store null. 
				For arrays that store primitive values, the default values depend on the exact data types stored by them.	
					
		4.3.4 Array initialization
			
			- Using for loop
			- Assign value to a specific position
				
				int intArray[] = new int[2];
				System.out.println(intArray[3]); Compiles but fails at runtime
				
				int intArray[] = new int[2];
				System.out.println(intArray[-10]); // Compiles but it will throw the exception Array-IndexOutOfBoundsException at runtime.
				
				int intArray[] = new int[2];
				System.out.println(intArray[1.2]);	// Won’t compile; can’t specify array index using floating-point number	
				
				- You can’t remove array positions. For an array of objects, you can set a position
					to the value null, but it doesn’t remove the array position.
					
		4.3.5 Combining array declaration, allocation, and initialization
					
			int intArray[] = {0, 1};
			String[] strArray = {"Summer", "Winter"};
			int multiArray[][] = { {0, 1}, {3, 4, 5} };
				
			int intArray2[] = new int[]{0, 1};
			String[] strArray2 = new String[]{"Summer", "Winter"};
			int multiArray2[][] = new int[][]{ {0, 1}, {3, 4, 5}};
				
				
			Won't compile
				
				int intArray2[] = new int[2]{0, 1};
				String[] strArray2 = new String[2]{"Summer", "Winter"};
				int multiArray2[][] = new int[2][]{ {0, 1}, {3, 4, 5}};
					
				
			Also valid:
				
				int intArray[];
				intArray = new int[]{0, 1};	
					
					
			Not valid

				int intArray[];
				intArray = {0, 1};
				
		4.3.6 Asymmetrical multidimensional arrays	
				
			String multiStrArr[][] = new String[][] { {"A", "B"}, null, {"Jan", "Feb", "Mar"},};
				
		4.3.7 Arrays of type interface, abstract class, and class Object
			
			Interface type
				
				- If the type of an array is an interface, its elements are either null or objects that implement the relevant interface type.
					
			Abstract class type
				
				- If the type of an array is an abstract class, its elements are either null or objects of concrete classes that extend the 
					relevant abstract class
						
			Object

				- Because all classes extend the class java.lang.Object, elements of an array whose type is java.lang.Object can refer to any object.
					
					
		4.3.8 Members of an array
				
			Array objects have the following public members:
				
				- length
				- clone()
				- Inherited Methods (Methods inherited from the class Object, except the method clone)
					
			String—Retrieve length using the method length()
			Array—Determine element count using the variable length
				
	4.4 ArrayList		
	
		Here are a few more important properties of an ArrayList:
		
			- It implements the interface List.
			- It allows null values to be added to it.
			- It implements all list operations (add, modify, and delete values).
			- It allows duplicate values to be added to it.
			- It maintains its insertion order.
			- You can use either Iterator or ListIterator to iterate over the items of an ArrayList.
			- It supports generics, making it type safe. (You have to declare the type of the elements that 
				should be added to an ArrayList with its declaration.)
				
		4.4.1 Creating an ArrayList
		
			An ArrayList uses an array to store its elements. It provides you with the functionality of a dynamic array.
		
		4.4.2 Adding elements to an ArrayList
		
			You can add a value to an ArrayList either at its end or at a specified position.
			
		4.4.3 Accessing elements of an ArrayList
		
			- Enhanced for loop: It’s not possible to remove elements from an ArrayList while iterating it using a for loop.
			
			- Iterator or ListIterator: It doesn’t contain any reference to the current element of an ArrayList. 
				ListIterator provides you with a method (hasNext) to check whether more elements exist for an
				ArrayList. If true, you can extract its next element using the method next().
				
				An iterator (Iterator or ListIterator) lets you remove elements as you iterate an ArrayList.
				
			Note that an ArrayList preserves the insertion order of its elements. 
			ListIterator and the enhanced for loop will return to you the elements in the order in which you added them.
			
		4.4.4 Modifying the elements of an ArrayList
		
			You can modify an ArrayList by either replacing an existing element in the ArrayList or modifying all of its existing values.
			
		4.4.5 Deleting the elements of an ArrayList

			ArrayList defines two methods to remove its elements, as follows:
			
				- remove(int index)—This method removes the element at the specified position in this list.
				- remove(Object o)—This method removes the first occurrence of the specified element from this list, if it’s present.
				
				The method remove compares the objects for equality before removing it from ArrayList by calling the method equals.
		
		4.4.6 Other methods of ArrayList
		
			Adding multiple elements to an ArrayList
			
				- addAll(Collection<? extends E> c)
				- addAll(int index, Collection<? extends E> c)
				
			Clearing ArrayList elements
			
				clear()
				
			Accessing individual ArrayList elements
			
				- get(int index)
				- size()
				- contains(Object o)
				- indexOf(Object o)
				- lastIndexOf(Object o)
				
			Cloning an ArrayList
			
				The method clone defined in the class ArrayList returns a shallow copy of this ArrayList instance. 
				“Shallow copy” means that this method creates a new instance of the ArrayList object to be cloned. 
				Its element references are copied, but the objects themselves are not.
				
			Creating an array from an ArrayList
			
				You can use the method toArray to return an array containing all the elements in an ArrayList 
				in sequence from the first to the last element.
					
				No references to the returned array, which is itself an object, are maintained by the ArrayList. 
				But the references to the individual ArrayList elements are copied to the returned array and are still referred to by the ArrayList.
				
				This implies that if you modify the returned array by, say, swapping the position of its elements or 
				by assigning new objects to its elements, the elements of ArrayList won’t be affected. But if you modify 
				the state of (mutable) elements of the returned array, then the modified state of elements 
				will be reflected in the ArrayList.
				
	4.5 Comparing objects for equality
	
		4.5.1 The method equals in the class java.lang.Object
		
		4.5.2 Comparing objects of a user-defined class
		
		4.5.4 Contract of the equals method
		
		4.6 Working with calendar data
		
			4.6.1 LocalDate
				
				To store dates like a birthday or anniversary, visiting a place, or starting a job, school, or college, you don’t need to store the time.
				LocalDate instances are immutable and hence safe to be used in a multi-threaded environment.
				
				Create a LocalDate
					
					- of()
					- now()
					- parse()
					
				Querying LocalDate
					
					- getXX()
						
						getDayOfMonth()
						getDayOfWeek()
						getDayOfYear()
						getMonth()
						getMonthValue()
						getYear()
						
					- isAfter()  
					- isBefore()
					
				Manipulate LocalDate
					
					- minusXX()
					
						minusDays()
						minusMonths()
						minusWeeks()
						minusYears()
						
					- plusXX()
					
						plusDays()
						plusMonths()
						plusWeeks()
						plusYears()
						
					- withXX()
						
						withDayOfMonth()
						withDayOfYear()
						withMonth()
						withYear()
						
					Converting to another type
					
						atTime()
						
					
			4.6.2 LocalTime	
			
				To store times like breakfast, conference talk start time, or in-store sale end time, you can use LocalTime.
				
				Create LocalTime
				
					- of()
					- now()
					- parse()
					
				LocalTime constants
				
					- LocalTime.MIN—Minimum supported time, that is, 00:00
					- LocalTime.MAX—Maximum supported time, that is, 23:59:59.999999999
					- LocalTime.MIDNIGHT—Time when the day starts, that is, 00:00
					- LocalTime.NOON—Noontime, that is, 12:00
					
				Querying LocalTime
				
					- getXX()
						
						getHour()
						getMinute()
						getSecond()
						getNano()
					
					- isAfter() 
					- isBefore()
					
				Manipulate LocalTime
				
					- minusHours()
					- minusMinutes()
					- minusSeconds()
					- minusNanos()
				
				Combine with another type
					
					- atDate()
					
			4.6.3 LocalDateTime
			
				- If you want to store both date and time (without the time zone), use the class LocalDateTime.
				- It stores a value like 2050-06-18T14:20:30:908765 (year-month-dayThours:minutes:seconds:nanoseconds).
				- You can consider this class to offer the functionality of both the LocalDate and LocalTime classes.
				
				Important methods:
				
				/* Parse String to LocalDateTime */
				LocalDateTime prizeCeremony = LocalDateTime.parse("2050-06-05T14:00:00");

				/* Get current date and time */
				LocalDateTime dateTimeNow = LocalDateTime.now();

				/* Retrieve month as integer value */
				if (prizeCeremony.getMonthValue() == 6) 
					System.out.println("Can't invite president");
				else
					System.out.println("President invited");
		
				LocalDateTime chiefGuestDeparture = LocalDateTime.parse("2050-06-05T14:30:00");

				/* Check whether a LocalDateTime instance is before another LocalDateTime instance */
				if (prizeCeremony.plusHours(2).isAfter(chiefGuestDeparture))
					System.out.println("Chief Guest will leave before ceremony completes");
		
				/* Instantiate LocalDateTime using separate int values*/
				LocalDateTime eventMgrArrival = LocalDateTime.of(2050, 6, 5, 14, 30, 0);
		
				if (eventMgrArrival.isAfter(prizeCeremony.minusHours(3)))
					System.out.println("Manager is supposed to arrive 3 hrs earlier");
			
			4.6.4 Period

				- The Period class represents a date-based amount in years, months, and days, like 2 years, 5 months, and 10 days. 
				- To work with a time-based amount in seconds and nanoseconds, you can use the Duration class.
				- The Duration class can be used to store amounts of time like 1 hour, 36 minutes, or 29.4 seconds.
				- You can add or subtract Period instances from the LocalDate and LocalDateTime classes. 
				- Period is also an immutable class and hence safe to use in a multi threaded environment.
				
				Instantiating Period
				
					The static methods of(), ofYears(), ofMonths(), ofWeeks(), and ofDays()

					You can also define negative periods by passing negative integer values to all the preceding methods.
					
						Period period6 = Period.ofDays(-15);
						
					You can also parse a string to instantiate Period by using its static method parse. 
					This method parses string values of the format PnYnMnD or PnW, where n represents a number and the letters 
						(P, Y, M, D, and W) represent parse, year, month, day, and week.
						
					These letters can exist in lower- or uppercase. 
					Each string must start with the letter p or P and must include at least one of the four sections, 
						that is, year, month, week, or day.

					For the string format PnW, the count of weeks is multiplied by 7 to get the number of days.
					
					You can also define negative periods using parse().
					
					If you precede the complete string value passed to parse() with a negative sign (-), it’s applied to all values.
					
					If you place a negative sign just before an individual number, it applies only to that section.
					
					You can also use the static method between(LocalDate dateInclusive, LocalDate dateExclusive) to instantiate Period
					
				Manipulating LocalDate and LocalDateTime using period
				
					