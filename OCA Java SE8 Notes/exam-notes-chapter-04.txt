Selected classes from the Java API and arrays

	4.1 Welcome to the world of the String class
		
		4.1.1 Creating String objects
		
			- String objects created using the operator new always refer to separate objects, even if they store the same sequence of characters.
			- String objects created using the assignment operator (=) may refer to the same object if they store the same sequence of characters.
			- You can also create a String object by enclosing a value within double quotes ("): 
				
				System.out.println("Morning"); // Creates a new String object with value Morning in the String constant pool
				
			- Because String objects are immutable, the pool of String objects is also called the String constant pool.
			- You can also invoke other overloaded constructors of the class String to create its objects by using the operator new.
			- You can also create objects of String using the classes StringBuilder and StringBuffer.
			
			Counting string objects
			
				- If a String object is created using the keyword new, it always results in the creation of a new String object. 
				- String objects created this way are never pooled. 
				- When a variable is assigned a String literal using the assignment operator, a new String object is created only if a String object with the
					same value isn’t found in the String constant pool.
					
		4.1.2 The class String is immutable
		
			- Once created, the contents of an object of the class String can never be modified.
			- The immutability of String objects helps the JVM reuse String objects, reducing memory overhead and increasing performance.	
			- The JVM creates a pool of String objects that can be referenced by multiple variables across the JVM.
			- The JVM can make this optimization only because String is immutable.
			- String objects can be shared across multiple reference variables without any fear of changes in their values.
			
			Immutability of the class String:
			
				- String uses a char array to store its value
				- String uses final variable to store its value	
				- Methods of string don’t modify the char array
				
		4.1.3 Methods of the class String
		
			charAt()
			indexOf()
			substring()
			trim()
			replace()
			length()
			startsWith() and endsWith()
			
			Method chaining
				
				- Because String objects are immutable, their values won’t change if you execute methods on them. 
				- You can, of course, reassign a value to a reference variable of type String.
				
				
		4.1.4 String objects and operators
		
			- Concatenation: + and +=
			- Equality: == and !=
			
			Behind the scenes, string concatenation is implemented by using the StringBuilder or StringBuffer.
			
			When you use += to concatenate String values, ensure that the variable you’re using has been initialized (and doesn’t contain null)
		
		4.1.5 Determining equality of Strings
		
			Equals method
			
				- The correct way to compare two String values for equality is to use the equals method defined in the String class.
				
			Comparing reference variables to instance values
			
				- The operator == compares the reference variables, that is, whether the variables refer to the same object.
		
				- You can use the operator != to compare the inequality of objects referred to by String variables.
				
			Equality of values returned by string methods
				
				- Watch out for the exam questions that test you on using the == operator with String values returned by methods of the class String. 
					Because these values are created using the new operator, they aren’t placed in the String pool.
				
		4.2 Mutable strings: StringBuilder
		
			- The class StringBuilder is defined in the package java.lang, and it has a mutable sequence of characters.
			
			- You should use the class StringBuilder when you’re dealing with larger strings or modifying the contents of a string often.
			
			4.2.1 The StringBuilder class is mutable
			
			4.2.2 Creating StringBuilder objects
				
				StringBuilder sb1 = new StringBuilder();					// initial 16 characters of capacity
				StringBuilder sb2 = new StringBuilder(sb1);					// receives an StringBuilder object
				StringBuilder sb3 = new StringBuilder(50);					// receives an int to specify initial capacity
				StringBuilder sb4 = new StringBuilder("Shreya Gupta");		// receives a String
				
			4.2.3 Methods of class StringBuilder
			
				charAt()
				indexOf()
				substring()
				length()
				append()
				insert()
				delete()
				deleteCharAt()
				reverse()
				replace() * replace in String accepts characters to be replaced but in StringBuilder accepts a position to be replaced.
				subsequence() * subsequence doesn’t modify the existing value of a StringBuilder object
				
			4.2.4 A quick note on the class StringBuffer
			
				The classes StringBuffer and StringBuilder offer the same functionality, with one difference: 
				the methods of the class StringBuffer are synchronized where necessary, whereas the methods of the class StringBuilder aren’t.
				If you need to access your code from multiple threads, use StringBuffer; otherwise use StringBuilder.
				
				
				
				
				
		