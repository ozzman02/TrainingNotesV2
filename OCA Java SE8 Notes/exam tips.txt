Exam Tips

Chapter 1

	- The classes and interfaces can be defined in any order of occurrence in a Java source code file.

	- Classes and interfaces defined in the same Java source code file can’t be defined in separate packages. Classes and interfaces imported using the import 
		statement are available to all the classes and interfaces defined in the same Java source code file.
	
	- The method parameters that are passed to the main method are also called command-line parameters or command-line values. As the name
		implies, these values are passed to a method from the command line.

	- You don’t need an explicit import statement to use members from the java.lang package. Classes and interfaces in this package are automatically
		imported in all other Java classes, interfaces, or enums.

	- Members of a named package can’t access classes and interfaces defined in the default package.

	- Static imports is a Java feature, but the syntax is import static.
	
	- A derived class can inherit and access protected members of its base class, regardless of the package in which it’s defined. 

	- A derived class in a separate package can’t access protected members of its base class using reference variables.

	- Default access can be compared to package-private (accessible only within a package), and protected access can be compared to 
		package private + kids (“kids” refer to derived classes). Kids can access protected methods only by inheritance and not 
		by reference (accessing members by using the dot operator on an object).

	- Watch out for invalid combinations of a Java entity and an access modifier. Such code won’t compile

	- An abstract class may or may not define an abstract method. But a concrete class can’t define an abstract method.

	- A method with an empty body isn’t an abstract method.

	- Don’t be tricked by code that tries to apply the nonaccess modifier abstract to a variable. Such code won’t compile.

	- Even though you can use an object reference variable to access static members, it’s not advisable to do so. Because static members belong
		to a class and not to individual objects, using object reference variables to access static members may make them appear to belong to an object. 
		The preferred way to access them is by using the class name. The static and final nonaccess modifiers can be used together to define 
		constants (variables whose value can’t change).

	- static methods and variables can’t access the instance members of a class.

	- You can access static variables and methods using a null reference.

Chapter 2

	- In this exam, the questions test your ability to select the best suitable data type for a condition that can only have two states: yes/no or true/
		false. The correct answer here is the boolean type.
	
	- In the exam, you won’t be asked to convert a number from the decimal number system to the octal and hexadecimal number systems and
		vice versa. But you can expect questions that ask you to select valid literals for integers.
	
	- Never use double quotes to assign a letter to a char variable. Double quotes are used to assign a value to a variable of type String.

	- The exam will test your understanding of the possible values that can be assigned to a variable of type char, including whether an assignment
		will result in a compilation error. Don’t worry—it won’t test you on the value that’s actually displayed after assigning arbitrary 
		integer values to a char!
	
	- Watch out for questions that use incorrect names for the primitive data types.

	- You can’t use the assignment operators to assign a boolean value to variables of type char, byte, int, short, long, float, or double, or vice versa.

	- You can use unary increment and decrement operators with variables but not with literal values. If you do, the code won’t compile.
	
	- You can use all arithmetic operators with the char primitive data type, including unary increment and decrement operators.
	
	
	- For arithmetic operations with data types char, byte, short, or int, all operand values are widened to int. If an arithmetic operation
		includes the data type long, all operand values are widened to long. If an arithmetic operation includes a data type of float or double, all operand values are widened to double.
		
	- You can’t compare incomparable values. For example, you can’t compare a boolean with an int, a char, or a floating-point number. If you try to do so, your code will not compile.
	
	- The result of the relational operation is always a boolean value. You can’t assign the result of a relational operation to a variable of type char, int, byte, short, long, float, or double.
	
	- All wrapper classes (except Character) define a constructor that accepts a String argument representing the primitive value that needs to be
		wrapped. Watch out for exam questions that include a call to a no-argument constructor of a wrapper class. None of these classes define a no-argument
		constructor.
		
	- All six numeric wrapper classes inherit all six ***Value() methods from their common superclass, Number.
	
	- All parse methods throw NumberFormat-Exception except Boolean.parseBoolean(). This method returns false whenever
		the string it parses is not equal to “true” (case-insensitive comparison).
		
		public static boolean parseBoolean(String s)
		public static byte parseByte(String s)
		public static short parseShort (String s)
		public static int parseInt(String s)
		public static long parseLong(String s)
		public static float parseFloat(String s)
		public static double parseDouble(String s)
	
	
	- Wrapper classes Float and Double don’t cache objects for any range of values.
	
	- Cached instances exist for the wrapper Boolean class for the values true and false. 
	- The Character class caches instances with values from 0 to 127. 
	- Classes Byte, Short, Integer, and Long cache instances for values -127 to 128. 
	- No cached instances exist for the Float and Double wrapper classes
	
	- Objects of different wrapper classes with same values are not equal. 
	- Using equals() with such instances will return false. If you use == with such instances, the code won’t compile.
	
	- Wrapper classes are immutable. Adding a primitive value to a wrapper class variable doesn’t modify the value of the object it refers to. 
		The wrapper class variable is assigned a new object.
	
	- EXAM TIP Unboxing a wrapper reference variable, which refers to null, will throw a NullPointerException.
	
Chapter 3

	- The local variables topic is a favorite of OCA Java SE 8 Programmer I exam authors. You’re likely to be asked a question that seems to be
	about a rather complex topic, such as inheritance or exception handling, but instead it’ll be testing your knowledge on the scope of a local variable
	
	- The scope of an instance variable is longer than that of a local variable or a method parameter.
	
	- Different local variables can have different scopes. The scope of local variables may be shorter than or as long as the scope of method parameters.
	The scope of local variables is less than the scope of a method if they’re declared in a sub-block (within braces {}) in a method. This sub-block can be
	an if statement, a switch construct, a loop, or a try-catch block
	
	- Watch out for a count of instances created in a given code—the ones that are eligible for garbage collection and the ones that aren’t.
	
	- When an object goes out of scope, it can no longer be referenced and is marked for garbage collection.
	
	- An instance is dereferenced by reassignment when a variable is either explicitly set to null or is assigned another instance or reference variable.
	
	- Watch out for questions with wordings such as “which objects are sure to be collected during the next GC cycle,” for which the real answer can
		never be known.
		
	- You can optionally assign the value returned by a method to a variable. If you don’t assign the returned value from a method, it’s neither a compilation
		error nor a runtime exception.
		
	- In the OCA exam, you may be questioned on the valid return types for a method that doesn’t accept any method parameters. Note that there are
		no valid or invalid combinations of the number and type of method parameters that can be passed to a method and the value that it can return. 
		They’re independent of each other.
		
	- You can define a constructor using all four access levels: public, protected, default, and private.	
	
	- A constructor must not define any return type. Instead, it creates and returns an object of the class in which it’s defined. 
		If you define a return type for a constructor, it’ll no longer be treated as a constructor. Instead, it’ll be treated as a regular method, 
		even though it shares the same name as its class.
		
	- The accessibility of a default constructor matches the accessibility of its class. Java creates a public default constructor 
		for a public class. It creates a default constructor with package access for a class with package-level access.
		
	- Java defines a default constructor if and only if you don’t define a constructor. If a class doesn’t define a constructor, the compiler will add a
		default, no-argument constructor to the class. But if you modify the class later by adding a constructor to it, the Java compiler 
		will remove the default, no argument constructor that it initially added to the class.
	
	- Although object fields can be manipulated by direct access, it isn’t a recommended practice. It makes an object vulnerable to invalid data. Such
		a class isn’t well encapsulated
		
	- A call to a method must be followed by passing values to all its method parameters. For a method that defines one or more method parameters,
		you can’t call the method followed by () to indicate it doesn’t need to be passed values.
		
	- Methods that accept varargs parameters can be called with a different count of actual arguments. Also, a method that accepts a vararg can be
		invoked with an array in place of the vararg.
		
	- The terms encapsulation and information hiding are used interchangeably.
	
	- By exposing object functionality only through methods, you can prevent your private variables from being assigned any values that don’t fit
		your requirements. 
	
	- One of the best ways to create a well-encapsulated class is to define its instance variables as private variables and allow access to these
		variables using public methods.
		
	- When you pass a primitive variable to a method, its value remains the same after the execution of the method. The value doesn’t change,
		regardless of whether the method reassigns the primitive to another variable or modifies it.
	
Chapter 4

	- The default value for String is null.
	
	- If a String object is created using the keyword new, it always results in the creation of a new String object. 
	
	- String objects created this way are never pooled. 
	
	- When a variable is assigned a String literal using the assignment operator, a new String object is created only if a String object with the
		same value isn’t found in the String constant pool.
	
	- Strings are immutable. Once initialized, a String value can’t be modified. 
	
	- All the String methods that return a modified String value return a new String object with the modified value. 
	
	- The original String value always remains the same.
	
	- The substring method doesn’t include the character at the end position in its return value.
		
	- The length of a String is one number greater than the position that stores its last character. 
	
	- When chained, the methods are evaluated from left to right.
	
	- The operator == compares whether the reference variables refer to the same objects, and the method equals compares the String values for
		equality. Always use the equals method to compare two Strings for equality. Never use the == operator for this purpose.
		
	- Watch out for the exam questions that test you on using the == operator with String values returned by methods of the class String. Because
		these values are created using the new operator, they aren’t placed in the String pool.
		
	- You can expect questions on the need for the StringBuilder class and its comparison with the String class.
	
	- For classes that haven’t overridden the toString method, the append method results in appending the output from the default implementation
		of method toString defined in the class Object (if the parameter isn’t null).
		
	- Take note of the start and end positions when inserting a value in a StringBuilder. Multiple flavors of the insert method defined in 
		StringBuilder may confuse you because they can be used to insert either single or multiple characters.
		
	- Combinations of the deleteCharAt and insert methods can be quite confusing.
	
	- You can’t use the method reverse to reverse a substring of StringBuilder.
	
	- Once allocated, all the array elements store their default values. 
		
		Elements in an array that store objects default to null. 
		
		Elements of an array that store primitive data types store 
		
			- 0 for integer types (byte, short, int, long); 
			- 0.0 for decimal types (float and double); 
			- false for boolean; or
			- \u0000 for char data.
			
	- Code to access an array index will throw a runtime exception if you pass it an invalid array index value. 
		Code to access an array index will fail	to compile if you don’t use a char, byte, short, or int.
		
	- When you combine an array declaration, allocation, and initialization in a single step, you can’t specify the size of the array. 
		The size of the array is calculated by the number of values that are assigned to the array.
		
	- An ArrayList preserves the order of insertion of its elements. Iterator, ListIterator, and the enhanced for loop 
		will return the elements in the order in which they were added to the ArrayList. 
		An iterator(Iterator or ListIterator) lets you remove elements as you iterate an ArrayList. 
		It’s not possible to remove elements from an ArrayList while iterating it using a for loop.
		
	- In the exam, you’re likely to encounter a question that adds the same object reference to multiple lists and then 
		tests you on your understanding of the state of the same object and reference variable in all the lists.
	
	- An ArrayList can store duplicate object values.
	
	- In the exam, watch out for questions about the correct implementation of the equals method (refer to section 4.5.4) to compare two objects
		versus questions about the equals methods that simply compile correctly. If you’d been asked whether equals() in the previous 
		example code would compile correctly, the correct answer would be yes.
	
	- The method equals defines a method parameter of type Object, and its return type is boolean. Don’t change the name of the method, its
		return type, or the type of method parameter when you define (override) this method in your class to compare two objects.
		
	- You may get to answer explicit questions on the contract of the equals method. An equals method that returns true for a null object passed
		to it will violate the contract. Also, if the equals method modifies the value of any of the instance variables of the method
		parameter passed to it, or of the object on which it is called, it will violate the equals contract.
		
	- If you pass invalid values to parse() or of(), you’ll get Date-TimeParseException. The format of the string passed to parse() must be
		exactly of the format 9999-99-99. The month and date values passed to parse() must be of two digits; 
		a single digit is considered an invalid value. For days and months with values 1–9, pass 01–09.
		
	- LocalDate is immutable. All the methods that seem to manipulate its value return a copy of the LocalDate instance on which it’s called.
	
	- All additions, subtractions, or replacements to LocalDate consider leap years.
	
	- If you pass any invalid hours, minutes, or seconds value to the method atTime, it will throw a DateTimeException at runtime.
	
	- LocalTime doesn’t define a method to pass a.m. or p.m. Use values 0–23 to define hours. 
		If you pass out-of-range values to either hours, minutes, or seconds, you’ll get a runtime exception.
		
	- If you pass invalid string values to LocalTime parse(), the code will compile but will throw a runtime exception. 
		If you don’t pass a DateTimeFormatter, the format of the string passed to parse() must be exactly of the format
		99:99:99. The hours and minutes values passed to parse() must be two digits; a single digit is considered an invalid value. 
		For hours and minutes with the value 0–9, pass 00–09.
		
	- The correct method names for querying LocalTime are getHour(), getMinute(), getSecond(), and getNano(). 
		Watch out for exam questions that use invalid method names like getHours(), getMinutes(), getSeconds(), or getNanoSeconds().
	
	- Unlike the getXXX() methods, minusXXX() methods use the plural form: getHour() versus minusHours(), getMinute() versus minusMinutes(),
		getSecond() versus minusSeconds(), and getNano() versus minusNanos().
		
	- LocalTime is immutable. Calling any method on its instance won’t modify its value.
	
	- The class LocalTime defines the method atDate(), which can be passed a LocalDate instance to create a LocalDateTime instance.
	
	- A period of 35 days is not stored as 1 month and 5 days. Its individual elements, that is, days, months, and years, are stored 
		the way it is initialized.
		
	- You can define positive or negative periods of time. For example, you can define Period instances representing 15 or -15 days.
	
	- If you pass invalid string values to Period.parse(), the code will compile but will throw a runtime exception.
	
	- The static method Period.between accepts two LocalDate instances and returns a Period instance representing the number of 
		years, days, and months between the two dates. The first date is included, but the second date
		is excluded in the returned Period. Here’s a quick way to remember it: period = end date – start date.
		
	- Because Period instances can represent positive or negative periods (like 15 days or -15 days), you can subtract days from 
		a LocalDate or LocalDateTime by calling the method plus.
		
	- When you initialize a Period instance with days more than 31 or months more than 12, it doesn’t recalculate its years, 
		months, or days components.
		
	- In the class Period, both the getXXX() methods and minusXXX() methods use the plural form: getYears(), minusHours().
	
	- When you subtract Period instances using the minusXXX() methods, the individual elements are subtracted. Subtracting P10D from P1M
		returns P1M-10D and not P20D.
		
	- When you subtract Period instances using the minusXXX() methods, the individual elements are subtracted. 
		Subtracting P10D from P1M returns P1M-10D and not P20D.
		
	- The method multipliedBy(int) in the class Period is used to modify all elements of a Period instance. Period doesn’t define a “divideBy()”
		method. Both the getXXX() methods and minusXXX() methods use the plural form getYears(), minusHours().
		
	- Adding a Period of 10 months to a Period of 5 months gives 15 months, not 1 year and 3 months.	
	
	- A DateTimeFormatter can define rules to format or parse a date object, time object, or both.
	
	- Watch out for the count and type of arguments passed to the instance method format.
	
		When calling format on a LocalDate, LocalTime, or LocalDateTime instance, pass a DateTimeFormatter instance as a method parameter.
		When calling format on DateTimeFormatter, pass a LocalDate, LocalTime, or LocalDateTime instance as a method argument.
		
	- If you pass a date object to the method format on a DateTimeFormatter instance that defines rules to format a time object, 
		it will throw a runtime exception.
		
	- If you're confused between M, m, D, and d, remember that an uppercase letter represents a bigger duration period. 
		So M is for month and m is for minutes. Similarly, D represents day of year; d represents day of month.
	
	- The parse methods are defined as static methods in the classes LocalDate, LocalTime, and LocalDateTime. The class DateTimeFormatter
		defines the parse method as an instance method.
		
	- When calling parse on LocalDate, LocalTime, or LocalDateTime instances, you might not specify a formatter. 
		In this case DateTimeFormatter.ISO_LOCAL_DATE, DateTimeFormatter.ISO_LOCAL_TIME, and DateTime-
		Formatter.ISO_LOCAL_DATE_TIME are used to parse text, respectively
		
	- The parse method is defined as a static method in classes LocalDate, LocalTime, and LocalDateTime. The class DateTimeFormatter defines
		the method parse as an instance method. But format() is defined as an instance method by all.
		
Chapter 5

	- In Java, then isn’t a keyword, so it must not be used with the if statement.
	
	- The if-else-if-else is an if-else construct in which the else part defines another if construct.
	
	- In the exam, watch out for code that uses misleading indentation in if constructs. In the absence of a defined code block (marked with {}),
		only the statement following the if construct will be considered part of it.
	
	- Watch out for code in the exam that uses the assignment operator (=)to compare a boolean value in the if condition. It won’t compare the
		boolean value; it’ll assign a value to it. The correct operator for comparing a boolean value is the equality operator (==).
	
	- In the exam, watch out for compatibility of the value that’s returned by a ternary operator and the variable to which it’s assigned.
	
	- Watch out for nested ternary constructs on the exam
	
	- The if-else-if-else construct evaluates all the conditions until it finds a match. 
		A switch construct compares the argument passed to it with its labels.
		
	- Watch out for questions in the exam that try to pass a primitive decimal type such as float or double to a switch statement. 
		Code that tries to do so will not compile.
	
	- For nonprimitive types, that is, String and wrapper types, the switch argument must not be null, which would cause a 
		NullPointerException to be thrown.
	
	- All three parts of a for statement—initialization block, termination condition, and update clause—are optional. 
		A missing termination condition implies an infinite loop.
		
	- Watch out for code that uses an enhanced for loop and its loop variable to change the values of elements in the collection that it iterates. 
		This behavior often serves as food for thought for the exam authors.
		
	- Use the for-each loop to iterate over arrays and collections. Don’t use it to initialize, modify, or filter them.
	
	- A nested loop executes all its iterations for each single iteration of its immediate outer loop.
	
Chapter 6

	- Inheritance enables you to reuse code that has already been defined by a class. Inheritance can be implemented by extending a class
	
	- A derived class can inherit only what it can see.
	
	- The declaration of an interface can’t include a class name. An interface can never extend any class.
	
	- All the top-level Java types (classes, enums, and interfaces) can be declared using only two access levels: public and default. 
		Inner or nested types can be declared using any access level.
		
	- Interface methods are implicitly abstract. To define default or static methods, you must explicitly use the keyword default or static with
		the method declaration in an interface. Default and static methods include their implementation in an interface.
		
	- A static method in an interface can’t be called using a reference variable. It must be called using the interface name.
	
	- Unlike an interface, if you define a static method in a base class, it can be accessed using either a reference variable or the class name.
	
	- You must implement an abstract method of an interface using the explicit access modifier public.
	
	- While overriding a default method, you must not use the keyword default. Rules for overriding default and regular methods are the same.
	
	- static methods in a class and the interface that it implements are not related to each other. A static method in a class doesn’t hide or override
		the static method in the interface that it implements.
		
	- Because a derived class may inherit different implementations for the same method signature from multiple base classes, 
		multiple inheritance isn’t allowed in Java.
	
	- A class can extend multiple interfaces only if a set of rules is adhered to.
	
	- A class can implement multiple interfaces with the same constant names, only if a reference to the constants isn’t ambiguous.
	
	- A class can implement multiple interfaces with the same abstract method names if they have the same signature or form an overloaded set of
		methods.
		
	- A class can implement multiple interfaces with the same default method name and signature, if it overrides its default implementation.
	
	- A class can implement multiple interfaces with the same static method names, irrelevant of their return types or signature.