Exception Handling

    7.1 Exceptions in Java

        7.1.1  A taste of exceptions    

            - ArrayIndexOutOfBoundsException (code fails to compile)
            - FileNotFoundException (code fails to compile)
            - StackOverflowError  (method calls itself recursively without specifying an exit condition) (error at runtime)

            I/O API:

            - java.io.File
            
            - java.io.FileInputStream
                
                - defines methods read and close

            - java.io.FileOutputStream

                - define methods write and close

            - Creating an object of the class FileInputStream or FileOutputStream can throw 
                the checked exception java.io.FileNotFoundException.
            
            - The methods read, write, and close defined in classes FileInputStream and FileOutputStream 
                can throw the checked exception java.io.IOException.

            - FileNotFoundException subclasses IOException.

        7.1.2 Why handle exceptions separately?        

            Example:

                try {
                    step1
                    step2
                    step3
                }
                catch (Step1Exception e) {
                    // define code to execute
                }
                catch (Step2Exception e) {
                    // define code to execute
                }
                catch (Step3Exception e) {
                    // define code to execute
                }

            Because the exception handlers are defined separately, any confusion with what steps you need to accomplish 
            to perform a task or process has been clarified. 
             
            In addition, this code doesn’t compromise on checking the completion of a step before moving on to the next step, 
            courtesy of appropriate exception handlers.

        7.1.3 Does exception handling offer any other benefits?

            Apart from separating concerns between defining the regular program logic and the exception-handling code, 
            exceptions also can help pinpoint the offending code (code that throws an exception), together with the method 
            in which it is defined, by providing a stack trace of the exception or error.

            Stack Trace
            
                - A stack trace is so called because it gives you a way to trace back the stack (the sequence of method calls that generated the error)

                - The stack trace gives you a trace of the methods that were called when the JVM encountered an unhandled exception. 
                
                - Stack traces are read from the bottom up.

                - Depending on the complexity of your code, a stack trace can range from a few lines to hundreds of lines of code. 
                
                - A stack trace works with handled and unhandled exceptions

    7.2 Categories of exceptions

        7.2.1 Identifying exception categories

            - Checked exceptions
            - Runtime exceptions
            - Errors

            * Runtime exceptions and errors are collectively referred to as unchecked exceptions.

            - Of these three types, checked exceptions require most of your attention when it comes to coding and using methods.
            - Runtime exceptions represent programming errors.
            - Errors are thrown by the JVM.

        7.2.2 Class hierarchy of exception classes

            - Exception categories are related to each other; all extend the class java.lang.Throwable        

                - Checked exceptions: java.lang.Exception and its subclasses (excluding java.lang .RuntimeException and its subclasses)
                - Runtime exceptions: java.lang.RuntimeException and its subclasses
                - Errors —java.lang.Error and its subclasses

        7.2.3 Checked exceptions

            - A checked exception is an unacceptable condition foreseen by the author of a method but outside their immediate control.
            
            - Checked exceptions are so named because they’re checked during compilation. If a method call throws a checked exception, 
                the compiler checks and ensures that the calling method is either handling the exception or declaring it to be rethrown.      
            
            - A checked exception is a subclass of the class java.lang.Exception, but it’s not a subclass of java.lang.RuntimeException.
            
            - However, that the class java.lang.RuntimeException itself is a subclass of the class java.lang.Exception.  

            - Example: FileNotFoundException

        7.2.4 Runtime exceptions
 
            - A runtime exception is a representation of a programming error. These occur from inappropriate use of a piece of code.

            - A runtime exception is named so because it isn’t feasible to determine whether a method call will throw a runtime exception until it executes.

            - A runtime exception is a subclass of java.lang.RuntimeException

            - It’s optional to declare a runtime exception in the signature of a method. It’s up to the person who writes the code 
                to decide whether to declare it explicitly or not. 

            - Examples: NullPointerException (the most common one), ArrayIndexOutOfBoundsException and ClassCastException.

        7.2.5 Errors

            - These errors are considered to be serious exceptional conditions and they can’t be directly controlled by your code.

            - An error is a serious exception thrown by the JVM as a result of an error in the environment state that processes your code.

            - An error is a subclass of class java.lang.Error.

            - An error need not be a part of a method signature.

            - An error can be caught by an exception handler, but it shouldn’t be.

            - Examples: 
                
                - NoClassDefFoundError: error thrown by the JVM when it’s unable to locate the .class file that it’s supposed to run.
                
                - StackOverflowError: error thrown by the JVM when the size of the memory required by the stack of a Java program is 
                    greater than what the JRE has offered for the Java application. This error might also occur as a result of infinite 
                    or highly nested loops.

    7.3 Creating a method that throws an exception

        7.3.1 Create a method that throws a checked exception
            
            - Syntactically, you don’t always need a combination of throw and throws statements to create a method that throws 
                an exception (checked or unchecked). You can replace the throw statement with a method that throws an exception. 

        7.3.2 Handle-or-declare rule

            To use a method that throws a checked exception, you must do one of the following:

                - Handle the exception —Enclose the code within a try block and catch the thrown exception.

                - Declare it to be thrown—Declare the exception to be thrown by using thethrows clause.

                - Handle and declare—Implement both of the preceding options together.

        7.3.3 Creating a method that throws runtime exceptions or errors

            - When creating a method that throws a runtime exception or error, including the exception or error name in the throws clause isn’t required.

            - A method that throws a runtime exception or error isn’t subject to the handle-or-declare rule.

            - You can include the name of unchecked exceptions in the throws clause but you don't have to.

        7.3.4 A method can declare to throw all types of exceptions, even if it doesn’t

            - A method can declare to throw any type of exception, checked or unchecked, even if it doesn’t do so. 
		        But a try block can’t define a catch block for a checked exception (other than Exception) if the try block doesn’t 
                throw that checked exception or use a method that declares to throw that checked exception.
            
            class HandleExceptions {
                
                void method6() {
                    try {}
                    catch (Error e) {}
                }

                void method7() {
                    try {}
                    catch (Exception e) {}
                }

                void method8() {
                    try {}
                    catch (Throwable e) {}
                }

                void method9() {
                    try {}
                    catch (RuntimeException e) {}
                }

                void method10() {
                    try {}
                    catch (FileNotFoundException e) {}   ---> does not compile
                }

            }
            
    7.4 What happens when an exception is thrown?
        
        Stack: 
            
            - A stack is a type of list in which the items that are added last to it are the first ones to be taken off it. (last in, first out --> LIFO).
            - This stack uses a stack pointer to point to the instructions that the OS should execute.

        Exception propagation example:

            1. When the method main starts its execution, its instructions are pushed onto the stack.
            2. The method main calls the method method1, and instructions for method1 are pushed onto the stack.
            3. Method1 calls method2; instructions for method2 are pushed onto the stack.
            4. method2 throws an exception: ArrayIndexOutOfBoundsException. Because method2 doesn’t handle this exception itself, 
                it’s passed to the method that called it—method1.
            5. method1 doesn’t define any exception handler for ArrayIndexOutOfBoundsException, so it hands this exception over to its calling method—main.
            6. There are no exception handlers for ArrayIndexOutOfBoundsException in main. Because there are no further methods that handle 
                ArrayIndexOutOfBoundsException, execution of the class Trace stops.

        7.4.1 Creating try-catch-finally blocks

            - Try what?
                
                First, you try to execute your code. If it doesn’t execute as planned, you handle the exceptional conditions using a catch block.

            - Catch what?
                
                You catch the exceptional event arising from the code enclosed within the try block and handle the event by defining 
                appropriate exception handlers.

            - What does finally do?

                Finally, you execute a set of code, in all conditions, regardless of whether the code in the try block throws any exceptions.

        
            - You can create an exception of your own—a custom exception—by extending the class Exception (or any of its subclasses).

            - Single Try Block, Multiple Catch Blocks and a Finally Blocks

                - For a try block, you can define multiple catch blocks but only a single finally block. 
                - Multiple catch blocks are used to handle different types of exceptions. 
                - A finally block is used to define cleanup code—code that closes and releases resources, such as file handlers 
                    and database or network connections.

        7.4.2 Using a method that throws a checked exception

            To use a method that throws a checked exception, you must follow the handle-or-declare rule

        7.4.3 Using a method that throws a runtime exception

            - If a method throws a runtime exception, the exception name isn’t required to be included in the method’s declaration (though it is allowed)
            - To use a method that throws a runtime exception, you don’t need to follow the declare-or-handle rule
            - In the same way you can catch a checked exception, you can also catch a Runtime- Exception.
            - On real projects, the preferred approach is to avoid runtime exceptions by including appropriate checks

        7.4.4 Using a method that throws an error

            You shouldn’t define code to handle errors. You should instead let the JVM handle the errors.

        7.4.5 Will a finally block execute even if the catch block defines a return statement?

            - It’s interesting to note that a finally block will execute even if the code in the try block or any of the catch blocks 
                defines a return statement.

            There are a few scenarios in Java in which a finally block does not execute:

                - Application termination: The try or the catch block executes System.exit, which immediately terminates the application.
                - Fatal errors: A crash of the JVM or the OS occurs.

        7.4.6 What happens if both a catch and a finally block define return statements?

            If both the catch and finally blocks define return statements, the calling method will receive a value from the finally block.

        7.4.7 What happens if a finally block modifies the value returned from a catch block?

            If a catch block returns a primitive data type, the finally block can’t modify the value being returned by it.
            If a catch block returns an object remember that primitives are passed by value and objects are passed by reference.
            If a catch block returns an object, the finally block can modify the state of the object being returned by it.

        7.4.8 Can a try block be followed only by a finally block?

            Syntactically, you can define a try block that might only be followed by a finally block, but if the code enclosed within 
            a try block declares to throw a checked exception, either it must be followed by a catch block, or the method in which it 
            is defined must declare to throw it.

        7.4.9 Does the order of the exceptions caught in the catch blocks matter?

            - Order doesn’t matter for unrelated classes. But it does matter for related classes sharing an IS-A relationship because 
                catch blocks are checked from the top down to find a suitable one to handle a given exception.

            - In the latter case, if you try to catch an exception of the base class before an exception of the derived class, 
                your code will fail to compile.

            - Similarly, if you try to catch an exception of a base class before its derived class, the exception handler for the derived class 
                can never be reached, so the code will fail to compile.

            - This behavior may seem bizarre, but there’s a valid reason for it. As you know, an object of a derived class can be assigned to a 
                variable of a base class.
            
            - Java doesn’t compile code if it contains unreachable statements.

            Rules to remember:

                - A try block may be followed by multiple catch blocks, and the catch blocks may be followed by a single finally block.
                
                - A try block may be followed by either a catch or a finally block or both. But a finally block alone won’t suffice 
                    if code in the try block throws a checked exception. In this case, you need to catch the checked exception 
                    or declare it to be thrown by your method. Otherwise, your code won’t compile.
                
                - The try, catch, and finally blocks can’t exist independently.

                - The finally block can’t appear before a catch block.

                - A finally block always executes, regardless of whether the code throws an exception.
        
        7.4.10 Can I rethrow an exception or the error I catch?

            You can do whatever you want with an exception. Rethrow it, pass it on to a method, assign it to another variable, 
            upload it to a server, send it in an SMS, and so on.

            When you rethrow a checked exception, it’s treated like a regular thrown checked exception, meaning that all the rules 
            of handling a checked exception apply to it.
            
            You can rethrow a runtime exception, but you’re not required to catch it, nor must you modify your method signature to 
            include the throws clause.

        7.4.11 Can I declare my methods to throw a checked exception instead of handling it?

            If a method doesn’t wish to handle the checked exceptions thrown by a method it calls, it can declare to throw these exceptions 
            using the throws clause in its own method declaration. 

        7.4.12 I can create nested loops, so can I create nested try-catch blocks too?

            The simple answer is yes, you can define a try-catch-finally block within another try-catch-finally block.

        7.4.13 Should I handle errors?

            Although you can define code to handle errors, you shouldn’t. You should instead let the JVM handle the errors.

    7.5 Common exception classes and categories

        Runtime Exceptions

            - ArrayIndexOutOfBoundsException
            - IndexOutOfBoundsException
            - ClassCastException
            - IllegalArgumentException
            - ArithmeticException
            - NullPointerException
            - NumberFormatException

        Errors

            - ExceptionInInitializerError
            - StackOverflowError
            - NoClassDefFoundError
            - OutOfMemoryError

        7.5.1 ArrayIndexOutOfBoundsException and IndexOutOfBoundsException

            When you try to access an invalid array position, ArrayIndexOutOfBoundsException is thrown. 
            When you try to access an invalid ArrayList position, IndexOutOfBoundsException is thrown.

            You can avoid these exceptions from being thrown if you check whether the index position you’re trying to access 
            is greater than or equal to 0 and less than the size of your array or ArrayList.

        7.5.2 ClassCastException 

            A ClassCastException is thrown when an object fails an IS-A test with the class type to which it’s being cast.

            You can use the instanceof operator to verify whether an object can be cast to another class before casting it.

        7.5.3 IllegalArgumentException

            As the name of this exception suggests, Illegal- ArgumentException is thrown to specify that a method has passed 
            illegal or inappropriate arguments.
            
        7.5.4 NullPointerException

            This exception is thrown by the JVM if you try to access a non-static method or a variable through a null value.

            The key is to ensure that the reference variable has been assigned a non-null value.

                - Accessing members of a reference variable that is explicitly assigned a null value
                - Using an uninitialized local variable, which may seem to throw a NullPointerException
                - Attempting to access nonexistent array positions
                - Using members of an array element that are assigned a null value

            By default, the static and instance variables of a class are assigned a null value.

            By default local variables aren’t assigned a value—not even a null value.

        7.5.5 ArithmeticException

            When the JVM encounters an exceptional mathe- matical condition, like dividing an integer by zero, it throws ArithmeticException.
            Note that division by 0 is not the same as division by 0.0.

            - A division will be performed as an integer division as long as only integers are involved.
              As soon as there’s a floating-point number, then everything is computed in floating-point arithmetic.

            - An integer division by zero throws an ArithmeticException.

            - A floating-point division by zero won’t throw any exception but rather will return ±Infinity or NaN, depending on the first operand.  

            - Division of a negative or positive integer value by 0 will result in an ArithmeticException.

	        - Division of 0 by 0 results in an ArithmeticException.

            - If you divide a positive decimal number by 0, the answer is Infinity.

            - If you divide a negative decimal number by 0, the answer is -Infinity.

            - Division of 0.0 by 0 results in NaN.

            - Dividing by 0 and dividing by 0.0 don’t give you the same results.

            - When a positive integer or decimal value is divided by 0.0, the result is Infinity.

            - When a negative integer or decimal value is divided by 0.0, the result is –Infinity.

        7.5.6 NumberFormatException

            - NumberFormatException is a runtime exception. It’s thrown to indicate that the application tried to convert a string 
            (with an inappropriate format) to one of the numeric types.

            - Valid
                
                System.out.println(Integer.parseInt("-123")); 
                System.out.println(Integer.parseInt("123")); 
                System.out.println(Integer.parseInt("+123")); 

                System.out.println(Integer.parseInt("123ABCD", 16);
            
            - Not valid     
                
                System.out.println(Integer.parseInt("123_45")); 
                System.out.println(Integer.parseInt("12ABCD"));

                System.out.println(Integer.parseInt("123ABCD"), 16);

            - Starting in Java 7, you can use underscores (_) in numeric literal values. But you can’t use them in String values 
              passed to the method parseInt.

            - One of the most common candidates for this exception is methods that are used to convert a command-line argument 
              (accepted as a String value) to a numeric value. 
              Please note that all command-line arguments are accepted in a String array as String values.

        7.5.7 ExceptionInInitializerError

            - The ExceptionInInitializerError error is typically thrown by the JVM when a static initializer in your code 
            throws any type of RuntimeException.

            - A static initializer block is defined using the keyword static, followed by curly braces, in a class.

            - This block is defined within a class but not within a method.

            - Runtime exceptions arising from any of the following will throw this error:

                - Execution of an anonymous static block
                - Initialization of a static variable
                - Execution of a static method (called from either of the previous two items)

            - ExceptionInInitializerError can be caused only by a runtime exception.

            - This error can’t be thrown if a static initializer block throws an object of a checked exception because the 
              Java compiler is intelligent enough to determine this condition and doesn’t allow you to throw an unhandled checked exception 
              from a static initialization block.

        7.5.8 StackOverflowError

            - The StackOverflowError error extends VirtualMachineError. As its name suggests, you should leave it to be managed by the JVM.
            
            - This error is thrown by the JVM when a Java program calls itself so many times that the memory stack allocated 
              to execute the Java program “overflows”.
            
            - Overflows means that the stack exceeds a certain size

        7.5.9 NoClassDefFoundError

            - What would happen if you failed to set your classpath and, as a result, the JVM was unable to load the class 
            that you wanted to access or execute? 
            
            - What would happen if you tried to run your application before compiling it (and so no .class file would be found for 
              the class you were trying to use)? 

            - Don’t confuse the exception thrown by Class.forName(), used to load the class, and NoClassDefFoundError, thrown by the JVM. 
              Class.forName() throws ClassNotFoundException.

        7.5.10 OutOfMemoryError

            What happens if you create and use a lot of objects in your application— for example, if you load a large chunk of 
            persistent data to be processed by your application? 
            In such a case, the JVM may run out of memory on the heap, and the garbage collector may not be able to free more memory for the JVM.

            You’ll always work with a finite heap size, no mat- ter what platform you work on, so you can’t create and use an unlimited 
            number of objects in your application. 

            To get around this error, you need to either limit the number of resources or objects that your application creates 
            or increase the heap size on the platform you’re working with.

            A number of tools are available (which are beyond the scope of this book) that can help you monitor the number of objects created in your application.