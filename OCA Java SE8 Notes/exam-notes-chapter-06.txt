Working with inheritance

	6.1 Inheritance with classes
	
		6.1.1 The need to inherit classes
		
			- Inheriting a class is also referred to as subclassing.
			- Employee is also referred to as the superclass, base class, or parent class. The classes Programmer and Manager that inherit the class Employee are called subclasses, derived
				classes, extended classes, or child classes.
				
		6.1.2 Benefits
		
			Do you know that all classes in Java inherit class java.lang.Object, either implicitly or explicitly?
			
			- Smaller derived class definitions
			- Ease of modification to common properties and behavior
			- Extensibility
			- Use tried-and-tested code from a base class
			- Concentrate on the specialized behavior of your classes
			- Logical structures and grouping
			
		6.1.3 A derived class contains within it an object of its base class
		
			- You can think of this arrangement as follows: When a class inherits another class, it encloses within it an object of the inherited class. Hence, all the non private
				members (variables and methods) of the inherited class are available to the class.
				
		6.1.4 Which base class members are inherited by a derived class?
		
			- The access modifiers play an important role in determining the inheritance of base class members in derived classes. 
			- A derived class can inherit only what it can see.
			- A derived class inherits all the non private members of its base class.
			- A derived class inherits base class members with the following accessibility levels:
				
				- Default: Members with default access can be accessed in a derived class only if the base and derived classes reside in the same package.
				- protected: Members with protected access are accessible to all the derived classes, regardless of the packages in which the base and derived classes are defined.
				- public: Members with public access are visible to all other classes.
				
		6.1.5 Which base class members aren’t inherited by a derived class?
		
			- private members of the base class
			- Base class members with default access, if the base class and derived classes exist in separate packages.
			- Constructors of the base class. A derived class can call a base class’s constructors, but it doesn’t inherit them
			
		6.1.6 Derived classes can define additional properties and behaviors
		
			- Derived classes can also define their own constructors and static methods and variables. A derived class can also hide or override its base class’s members.
			
			- When a derived class defines an instance or class variable with the same name as one defined from its base class, only these new variables and methods are visible to
				code using the derived class.
				
			- When a derived class defines different code for a method inherited from a base class by defining the method again, this method is treated as a special 
				method, an overridden method.
			
			- You can implement inheritance by using either a concrete class or an abstract class as a base class.
			
		6.1.7 Abstract base class versus concrete base class
		
			- The essence of an abstract class: it groups the common properties and behavior of its derived classes, but it prevents itself from being instantiated.
			
			- Also, an abstract class can force all its derived classes to define their own implementations for a behavior by defining it as an abstract method.
			
			- It isn’t mandatory for an abstract class to define an abstract method. But if an abstract base class defines one or more abstract methods, the class must be marked
				as abstract and the abstract methods must be implemented in all its concrete derived classes.
			
			- If a derived class doesn’t implement all the abstract methods defined by its base class, then it also needs to be an abstract class.
			
			- Important points about implementing inheritance using an abstract base class:
			
				- You can never create objects of an abstract class.
				- A base class can be defined as an abstract class, even if it doesn’t define any abstract methods.
				- A derived class should implement all the abstract methods of its base class. If it doesn’t, it must be defined as an abstract derived class.
				- You can use variables of an abstract base class to refer to objects of its derived class.
	
	6.2 Use interfaces
				
		- An interface can define a set of behaviors (methods) and constants. 
		- Usually it delegates the implementation of the behavior to the classes that implement it. 
		- Interfaces are used to refer to multiple related or unrelated objects that share the same set of behaviors.
		- As an application designer, you can use interfaces to establish the behavior that’s required from objects, promoting 
			flexibility in the design (new classes that implement an interface can be created and used later).
		- Interfaces make an application manageable, extensible, and less prone to propagation of errors due to changes to existing types.
		
		- With Java 8, you can add methods to an interface without breaking the existing implementations.
		- With Java 8, an interface can define the default implementation for its methods (so it doesn’t stop the existing classes that 
			implement it from compiling).
		- Interfaces in Java 8 can also define static methods.
		- Inheriting multiples classes isn’t allowed but inheriting multiple interfaces is allowed
		
		6.2.1 Need for using interfaces
		
			You need interfaces to enable multiple classes to support a set of behaviors.
			
		6.2.2 Defining interfaces
		
			- You can define methods and constants in an interface.
			- All methods of an interface are implicitly public.
			- The interface variables are implicitly public, static, and final.
			
			Why do you think these implicit modifiers are added to the interface members?
			
				- Because an interface is used to define a contract, it doesn’t make sense to limit access to its members
					and so they are implicitly public.
					
				- An interface can’t be instantiated, and so the value of its variables should be defined and accessible in a static context,
					which makes them implicitly static.
					
			Here’s the complete list of the components of an interface declaration:
			
				- Access modifiers
				- Nonaccess modifiers
				- Interface name
				- All extended interfaces, if the interface is extending any interfaces
				- Interface body (variables and methods), included within a pair of curly braces {}
				
				public strictfp interface Runner extends Athlete, Walker {}
				
			Valid access modifiers for an interface
			
				- You can declare a top-level interface (the one that isn’t declared within any other class or interface), 
					with only the following access levels:
					
					- public
					- No modifier (default access)
					
			Valid access modifiers for members of an interface
			
				- All members of an interface—variables, methods, inner interfaces, and inner classes (yes, an interface 
					can define a class within it!)—are inherently public because that’s the only modifier they can accept.
					
			Valid nonaccess modifiers for an interface
			
				- abstract
				- strictfp
				
				If you try to declare your top-level interfaces by using the other nonaccess modifiers (final, static, transient, 
					synchronized, or volatile), the interface will fail to compile.
					
		6.2.3 Types of methods in an interface

			- abstract methods
			- Default methods (new in Java 8) The default methods are also referred to as defender or virtual extension methods.
			- static methods (new in Java 8)
			
			Abstract methods
			
				- An abstract method is used to specify a behavior (set of methods), which must be defined by the class that implements it
				- When a class implements an interface with abstract methods, the class must implement all the methods, or else the class won’t compile.
				
			Default methods
			
				- Starting with Java 8, interfaces can be augmented by adding methods with default implementation. 
					Implementing classes might choose to override these methods to define their own specific behavior. 
					If they don’t choose to override them, the default implementation from the interface is used.
					
					interface Interviewer {
						
						abstract void conductInterview();
						
						default void submitInterviewStatus() {
							System.out.println("Accept");
						}
					}
					
					Because the return type of the preceding method, submitInterviewStatus, is void, the following definition of method 
					submitInterviewStatus is valid:
					
						// Empty method body != abstract method
						
						interface Interviewer {
							default void submitInterviewStatus() {}
						}
						
				- Declaration of a default method must be followed by the method body marked using {}.
						
				- Just like regular methods, the return type of a default method must match the type of the value that it returns.
				
					// Won't compile
					
					interface Interviewer {
						default void submitInterviewStatus() {
							return 0;
						}
					}
			
			Static methods
			
				- Static interface methods enable you to define utility methods in the interfaces that they belong to.
					
				- The static method must be called by prefixing its call with the interface name. You can’t call it
					using a reference variable of the interface type or a variable of the class that implements
					this interface.
					
		6.2.4 Implementing a single interface
		
			Rules:
			
				- Implement abstract methods
					
					- If a concrete class doesn’t implement the abstract methods of the interface it implements, it won’t compile
					- When you implement an interface method in a class, it follows method-overriding rules
					
				- Overriding default methods
				
					- A class might choose to override the implementation of a default method in an interface that it implements. 
					- If it doesn’t, the default implementation of the interface method will be used.
					- When a class overrides a default method, it doesn’t use the keyword default.
					- Also, it follows method-overriding rules
					
				- Static methods		
				
					- If an interface defines a static method, the class that implements it can define a static method with the same name, 
						but the method in the interface isn’t related to the method defined in the class.
						
		6.2.5 A class can’t extend multiple classes
		
			- Because a derived class may inherit different implementations for the same method signature from multiple base classes, 
				multiple inheritance isn’t allowed in Java.
				
		6.2.6 A class can implement multiple interfaces
		
			A class can extend multiple interfaces only if a set of rules is adhered to.
			
			- Implementing multiple interfaces with the same constant names
			
				- A class can implement multiple interfaces with the same constant name, as long as a call to these interfaces isn’t ambiguous.

				- If an implicit reference to a constant defined in an interface(s) isn’t ambiguous, the class that implements the interface 
					can refer to it without prefixing it with the interface name.
			
			- Implementing multiple interfaces with the same abstract method names
			
				- An abstract method doesn’t define a body. It’s acceptable for a class to extend multiple interfaces that define abstract 
					methods with the same signature because when a class implements the abstract method, it seems to implement the abstract method
					from all the interfaces.
					
					interface Jumpable {
						abstract String currentPosition();
					}
					interface Moveable {
						abstract String currentPosition();
					}
					class Animal implements Jumpable, Moveable {
						public String currentPosition() {
							return "Home";
						}
					}
					
				- But you can’t make a class extend multiple interfaces that define methods with the same name that don’t seem to be a correct 
					combination of overloaded methods.
					
					interface Jumpable {
						abstract String currentPosition();
					}
					interface Moveable {
						abstract void currentPosition();
					}
					class Animal implements Jumpable, Moveable {
						public String currentPosition() {
							return "Home";
						}
					}
					
			- Implementing multiple interfaces with the same default method names	

				Won’t compile; inherits unrelated defaults for relax() from Jumpable and Moveable
				
					interface Jumpable {
						default void relax() {
							System.out.println("No jumping");
						}
					}
					interface Moveable {
						default void relax() {
							System.out.println("No moving");
						}
					}
					class Animal implements Jumpable, Moveable { }
				
				Compiles successfully, default implementation of relax() is overridden
				
					interface Jumpable {
						default void relax() {
							System.out.println("No jumping");
						}
					}
					interface Moveable {
						default void relax() {
							System.out.println("No moving");
						}
					}
				
					class Animal implements Jumpable, Moveable {
						public void relax() {
							System.out.println("Watch movie");
						}
					}
				
				The default methods that a class inherits from the interfaces that it implements must form a correct 
					set of overloaded methods, or else the class won’t compile.
					
					// Won’t compile; relax in Jumpable and Moveable have unrelated return types
					
					interface Jumpable {
						default void relax() {
							System.out.println("No jumping");
						}
					}
					interface Moveable {
						default String relax() {
							System.out.println("No moving");
							return null;
						}
					}
					
					class Animal implements Jumpable, Moveable { }
					
			- Implementing multiple interfaces with the same static method names
			
				A class can implement multiple interfaces that define static methods with the same name, even if they don’t qualify as correctly 
					overloaded or overridden methods. This is because they’re not inherited by the class that implements the interfaces:
					
					// Compiles successfully
					
					interface Jumpable {
						static int maxDistance() {
							return 100;
						}
					}
					interface Moveable {
						static String maxDistance() {
							return "forest";
						}
					}
					class Animal implements Jumpable, Moveable { }
					
		6.2.7 Extending interfaces
		
			- Extending multiple interfaces with the same abstract method names
			
			- Extending multiple interfaces with the same name default method names
			
				- Classes always win: a method implemented in a class always has priority over an interface default method.
				
				- Otherwise, subinterfaces always win: a method implemented in a more specific interface has precedence over one 
					defined in a more general interface (for example, a superinterface).
				
				- Otherwise, if there’s an ambiguity that can’t be resolved by the previous rules, then you get to the case presented earlier: 
					the targeted superinterface must be specified, using the super keyword.
			
			- Extending multiple interfaces with the same static method names

		6.2.8 Modifying existing methods of an interface
		
			Changing static method to default or abstract: 
				
				- In an interface, if you change a static method to a default method, the implementing class will continue to compile, but the code that calls the method won’t compile.

				- If you change a static method to an abstract method, the implementing class might not compile.

			Changing an abstract method to default or static:

				- If you modify an interface by changing its abstract method to a default method, the code that calls the method will continue to compile.
				
				- But if you change an abstract method into a static method, the code that calls the method won’t compile.
			
			Changing a default method to abstract or static:

				- If you modify an interface and change its default method to an abstract method, a class that implements it might fail to compile. The implementing 
					class will fail to compile, if it doesn’t override the default method of the interface.

				- If you modify the default method to a static method in an interface, the code that calls the method won’t compile. 

		6.2.9 Properties of members of an interface

			Interface constants:

				- The variables of an interface are implicitly public, final, and static.
				- You must initialize all variables in an interface, or your code won’t compile.

			Interface methods:

				- The methods of an interface are implicitly public. When you implement an interface, you must implement all its methods by using the access modifier public

				- A class that implements an interface can’t make the interface’s methods more restrictive.

			Interface constructors:

				- Unlike a class, an interface can’t define constructors.

	6.3 Refence variables and object types

		- For this exam objective, you need to understand that when you refer to an object, the type of the object reference variable and the type of the object being 
			referred to may be different.

		- Objects of derived classes can be referred to using a reference variable of any of the following types:	

			- Its own type.
			- Its superclass.
			- Implemented interfaces.	

			There are differences, however, when you try to access an object using a reference variable of its own type, its base class, or an implemented interface.


			public class Person {}

			public class Employee extends Person {}

			public class HRExecutive extends Employee implements Interviewer {}


		6.3.1 Using a variable of the derived class to access its own object

			You can access all the variables and methods that are defined in its base class and interface.

				HRExecutive hrExecutive = new HRExecutive();

		6.3.2 Using a variable of a superclass to access an object of a derived class

			You can't. It can access only the variables and methods defined in the superclass.

				Employee employee = new HRExecutive();
				Person person = new HRExecutive();

		6.3.3 Using a variable of an implemented interface to access a derived class object

			The variable of an implemented interface can only access the methods defined in the interface.

				Interviewer interviewer = new HRExecutive();

		6.3.4 The need for accessing an object using the variables of its base class or implemented interfaces

			- When you do so, you’re only concerned about the behavior of the class that relates to its capability defined in the interface.
			
			- This arrangement also makes it possible to create an array (or a list) of the objects that refers to different types of objects 
				grouped by a common base class or an interface.

			- Reverse of these assignments will fail compilation.

	6.4 Casting

		6.4.1 How to cast a variable to another type

			- Casting is the process of forcefully making a variable behave as a variable of another type. If a class shares an IS-A or 
			  inheritance relationship with another class or interface, their variables can be cast to each other’s type.

		6.4.2 Need for casting

			You can’t access all the members of an object if you access it using a reference variable of any of its implemented interfaces 
			or of a base class.

			But when a need arises (as mentioned in the preceding paragraph), you might choose to access some of the members of a derived class, 
			which aren’t explicitly available, by using the reference variable of the base type or the implemented interface. This is where casting comes in!

	6.5 Use this and super to access objects and constructors

		6.5.1 Object reference: this

			- The this reference always points to an object’s own instance.

			- The this reference is required only when code executing within a method block needs to differentiate between an instance variable and 
				its local variable or method parameters.

			- You can also reference one constructor from another by using the keyword this. To call the default constructor, call this().

			- If present, a call to a constructor from another constructor must be done on the first line of code of the calling constructor.
		
			- With Java 8, you can use the keyword this in an interface’s default method to access its constants and other default and abstract methods. 

			- You can’t use the this keyword to access static methods of an interface.

		6.5.2 Object reference: super

			- Super is also an object reference, but super refers to the direct parent or base class of a class.

			- The variable reference super can be used to access a variable or method from the base class if there’s a clash between these names. 

			- The reference variable super can also be used to refer to the constructors of the base class in a derived class.

			- You can’t use this and super in static methods.

	6.6 Polymorphism

		The same action may have different meanings for different living beings.

		6.6.1 Polymorphism with classes

			- Polymorphism with classes comes into the picture when a class inherits another class and both the base and the derived classes define methods 
				with the same method signature (the same method name and method parameters).

			- Polymorphic methods are also called overridden methods.

				Rules to override methods:

				- Overridden methods are defined by classes and interfaces that share inheritance relationships.
				
				- The name of the overridden method in the base class and the overriding method in the subclass must be the same.
 				
				- The argument list passed to the overridden method in the base class must be the same as the argument
				 	list passed to the overriding method in the subclass.
 				
				- The return type of an overriding method in the subclass can be the same as or a subclass of the return type 
				 	of the overridden method in the base class. When the overriding method returns a subclass of the return type 
					of the overridden method, it’s known as a covariant return type.
 				
				- An overridden method defined in the base class can be an abstract method or a non-abstract method.
 				
				- A derived class can override only non-final methods.
				
				- Access modifiers for an overriding method can be the same as or less restrictive than the method being overridden, 
					but they can’t be more restrictive.

			- Polymorphism works only with overridden methods.

		6.6.2 Binding of variables and methods at compile time and runtime

			- Binding refers to resolving of variables or methods that would be called for a reference variable.

			- With inheritance, the instance variables bind at compile time and the methods bind at runtime.

		6.6.3 Polymorphism with interfaces

			- Polymorphism can also be implemented using interfaces.

			- Whereas polymorphism with classes has a class as the base class, polymorphism with interfaces requires a class to implement an interface.
			
			- Polymorphism with interfaces involves abstract or default methods from the implemented interface.
			
			- An interface can also define static methods, but static methods never participate in polymorphism.

			- Polymorphism with abstract methods
			
			- Polymorphism with default methods

				When a class implements an interface that defines a default method, the class might or might not override the default method.

	6.7 Simple lambda expressions

		- Functional programming enables you to write declarative code.

		- With functional programming, you can pass code to your methods as arguments. 

		6.7.1 Comparing passing values with passing code to methods

			Lambdas work only with functional interfaces, interfaces that define exactly one abstract method.

			public interface Validate {
				boolean check(Emp emp);
			}

			public class Emp {

				int performanceRating;

				public int getPerformanceRating() {
					return performanceRating;
				}

			}

			/* passing code to the method defined in the interface */

				Validate validate = e -> e.getPerformanceRating() >= 5;

		6.7.2 Syntax of lambda expressions

			e -> e.getPerformanceRating() >= 5;

			e  : 								parameter name
			-> : 								arrow
			e.getPerformanceRating() >= 5 :		body

			Each lambda expression has multiple optional and mandatory sections:
			
				- Parameter type (optional)
				- Parameter name (mandatory)
				- Arrow (mandatory)
				- Curly braces (optional)
				- Keyword return (optional)
				- Lambda body (mandatory)

			Valid variations of e -> e.getPerformanceRating() >= 5 are:

				Validate validate = (e) -> e.getPerformanceRating() >= 5;
				Validate validate = (Emp e) -> e.getPerformanceRating() >= 5;
				Validate validate = (e) -> { return (e.getPerformanceRating() >= 5); }

			The return value of the lambda expression must match or must be compatible with the return value of the only 
			abstract method in the interface.

				Invalid 
					
					/* method check returns boolean */
					- Validate validatePerformance = (Emp e) -> 5;

					/* invalid count of parameters, method check receives only one argument */
					- Validate validatePerformance = (e, f) -> { return true; };

		6.7.3 Interface Predicate

			Predicate is a functional interface. To use Predicate in your code, your method must accept a parameter of type 
				Predicate and you must use its public method test to evaluate an argument.

			Predicate<Emp> predicate = e -> e.getPerformanceRating() >= 5;



		Example

			interface Validate {
				boolean check(Emp emp);
			}

			class Emp {
				
				String name;
				int performanceRating;
				double salary;
				
				Emp(String nm, int rating, double sal) {
					name = nm;
					performanceRating = rating;
					salary = sal;
				}
				
				public String getName() { return name; }
				
				public int getPerformanceRating() { return performanceRating; }
				
				public double getSalary() { return salary; }
				
				public String toString() {
					return name + ":" + performanceRating + ":" + salary;
				}
			}
			
			class Test {

				static void filter(ArrayList<Emp> list, Validate rule) {
					for (Emp e : list) {
						if (rule.check(e)) {
							System.out.println(e);
						}
					}
				}

				static void filterWithPredicate(ArrayList<Emp> list, Predicate<Emp> rule) {
					for (Emp e : list) {
						if (rule.test(e)) {
							System.out.println(e);
						}
					}
				}
				
				public static void main(String[] args) {
					
					Emp e1 = new Emp("Shreya", 5, 9999.00);
					Emp e2 = new Emp("Paul", 4, 1234.00);
					Emp e3 = new Emp("Harry", 5, 8769.00);
					Emp e4 = new Emp("Selvan", 1, 2769.00);
					
					ArrayList<Emp> empArrList = new ArrayList<>();
					
					empArrList.add(e1);
					empArrList.add(e2);
					empArrList.add(e3);
					empArrList.add(e4);

					Validate validate = e -> e.getPerformanceRating() >= 5;
					filter(empArrList, validatePerfor);

					Predicate<Emp> predicate = e -> e.getPerformanceRating() >= 5;
					filterWithPredicate(empArrList, predicate);
					
				}

			}